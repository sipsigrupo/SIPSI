






[{"content":"Segui semplicemente la procedura standard Avvio Rapido di Hugo per iniziare subito.\nSono riportate le istruzioni dettagliate per l\u0026rsquo;installazione. Sono disponibili anche le istruzioni per aggiornare il tema.\nInstallazione #\rQueste istruzioni ti consentiranno di iniziare a utilizzare Hugo e Blowfish partendo da uno stato completamente vuoto. La maggior parte delle dipendenze menzionate in questa guida possono essere installate utilizzando il gestore pacchetti corretti per la tua piattaforma.\nInstallare Hugo #\rSe non hai mai utilizzato Hugo prima, dovrai [installarlo nella tua local machine] (https://gohugo.io/getting-started/installing). Puoi verificare se hai già installato Hugo utilizzando il comando hugo version.\nAssicurati di usare la versione 0.87.0 di Hugo o successiva, poiché il tema sfrutta alcune delle ultime caratteristiche di Hugo.\rPuoi trovare le istruzioni dettagliate sull\u0026rsquo;installazione per la propria piattaforma in Documenti Hugo.\nStrumenti Blowfish (raccomandato) #\rAbbiamo appena lanciato un nuovo strumento CLI per aiutarti a iniziare con Blowfish. Questo ti permette di creare un nuovo progetto Hugo, di installare il tema e di impostare i file di configurazione del tema per te. È ancora in fase beta, quindi per favore [segnala qualsiasi problema che riscontri] (https://github.com/nunocoracao/blowfish-tools).\nInstalla globalmente lo strumento CLI usando npm (o altri gestori di pacchetti):\nnpx blowfish-tools oppure\nnpm i -g blowfish-tools Poi esegui il comando blowfish-tools per avviare un\u0026rsquo;esecuzione interattiva che ti guiderà attraverso la creazione e la configurazione dei casi d\u0026rsquo;uso.\nblowfish-tools È anche possibile eseguire il comando blowfish-tools new per creare un nuovo progetto Hugo e installare il tema in una sola volta. Per ulteriori informazioni, consulta la guida del CLI.\nblowfish-tools new mynewsite Ecco un rapido video che ti mostra quanto sia veloce iniziare a utilizzare Blowfish con lo strumento CLI:\nInstallazione senza CLI #\rCrea un novo sito #\rEsegui il comando hugo new site mywebsite per creare un nuovo sito di Hugo in una cartella chiamata mywebsite.\nLa cartella del progetto può essere chiamata come si vuole, ma le istruzioni che seguono presuppongono che si chiami mywebsite. Se si usa un nome diverso, sostituiscilo di conseguenza.\nScaricare il tema Blowfish #\rEsistono diversi modi per installare il tema Blowfish nel proprio sito web Hugo. Dal più facile al più difficile da installare e mantenere, sono:\nGit submodule (recommended) Hugo module Copia manuale dei file Se non sei sicuro, scegli il metodo Git submodule.\nInstallazione usando Git #\rQuesto è il metodo piu facile e veloce per mantere il tema aggiornato. Oltre Hugo e Go, dovrai assicurarti di avere Git installato nel tuo local machine.\ncambia la directory del tuo sito web Hugo (che hai creato sopra), inizializza un nuovo repository git e aggiungi Blowfish come sottomodulo.\ncd mywebsite git init git submodule add -b main https://github.com/nunocoracao/blowfish.git themes/blowfish poi continua a impostare i file di configurazione del tema.\nInstallazione usando Hugo #\rPer questo metodo utilizzerai Hugo per gestire i tuoi temi. Hugo utilizza Go per inizializzare e gestire i moduli, quindi assicurati di aver installato go prima di procedere.\nScarica e installa Go. Puoi verificare se l\u0026rsquo;hai già installato utilizzando il comando go version.\nAssicurati di usare la versione Go 1.12 o successive poiché Hugo lo richiede affinché i moduli funzionino correttamente.\rDalla directory del tuo progetto Hugo (che hai creato sopra), inizializza i moduli per il tuo sito web:\n# Se gestisci il tuo progetto su GitHub Hugo mod init github.com/\u0026lt;nomeutente\u0026gt;/\u0026lt;nome-repo\u0026gt; # Se gestisci il tuo progetto localmente Hugo mod init my-project Aggiungi il tema alla tua configurazione creando un nuovo file config/_default/module.toml e aggiungendo quanto segue:\n[[imports]] disable = false path = \u0026#34;github.com/nunocoracao/blowfish/v2\u0026#34; Avvia il tuo server utilizzando hugo server e il tema verrà scaricato automaticamente.\nContinua con impostare i file di configurazione del tema.\nInstallazione manuale #\rScarica l\u0026rsquo;ultima versione del codice sorgente del tema.\nScarica da Github\r\u0026ldquo;blowfish\u0026rdquo; e \u0026ldquo;themes/\u0026rdquo; 2. Estrai l\u0026rsquo;archivio, rinomina la cartella in blowfish spostala nella directory themes/ all\u0026rsquo;interno della cartella principale del tuo progetto Hugo. 3. Continua con impostare i file di configurazione del tema.\nImposta i file di configurazione del tema #\rNella cartella principale del tuo sito web, elimina il file hugo.toml generato da Hugo. Copia i file di configurazione *.toml dal tema nella tua cartella config/_default/. Ciò ti garantirà di avere tutte le impostazioni corrette del tema e ti consentirà di personalizzare facilmente il tema in base alle tue esigenze.\nNote: Non dovresti sovrascrivere il file module.toml se ne esiste già uno nel tuo progetto!\rA seconda di come hai installato il tema, troverai i file di configurazione del tema in posti diversi:\nHugo modules: Nella directory della cache di Hugo o [scarica una copia](https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/nunocoracao/blowfish/ tree/main/config/_default) da GitHub Git submodule o installazione manuale: themes/blowfish/config/_default Una volta che hai copiato i file, la tua cartella delle configurazioni dovrebbe essere cosi:\nconfig/_default/ ├─ hugo.toml ├─ languages.en.toml ├─ markup.toml ├─ menus.en.toml ├─ module.toml # se hai usato Hugo modules come installazione └─ params.toml Importante: Se non hai utilizzato Hugo Modules per installare Blowfish, devi aggiungere la riga theme = \u0026quot;blowfish\u0026quot; all\u0026rsquo;inizio del tuo file hugo.toml.\rPasso successivo #\rL\u0026rsquo;installazione di base di Blowfish è ora completa. Continua alla sezione Per iniziare per ulteriori informazioni sulla configurazione del tema.\nInstallazione degli aggiornamenti #\rDi tanto in tanto verranno pubblicate nuove versioni che applicano correzioni e aggiungono nuove funzionalità al tema. Per sfruttare questi cambiamenti, dovrai aggiornare i file del tema sul tuo sito web.\nIl modo in cui procedere dipenderà dal metodo di installazione scelto al momento dell\u0026rsquo;installazione originale del tema. Le istruzioni per ciascun metodo sono disponibili di seguito.\nGit submodule Hugo module Copia manuale del file Aggiornamento utilizzando Git #\rI sottomoduli Git possono essere aggiornati utilizzando il comando git. Esegui semplicemente il comando seguente e l\u0026rsquo;ultima versione del tema verrà scaricata nel tuo repository locale:\ngit submodule update --remote --merge Una volta aggiornato il sottomodulo, riavvia il tuo sito e verifica che tutto funzioni come previsto.\nAggiornamento utilizzando Hugo #\rHugo rende l\u0026rsquo;aggiornamento dei moduli estremamente semplice. Basta passare alla directory del progetto ed eseguire il seguente comando:\nhugo mod get -u Hugo aggiornerà automaticamente tutti i moduli richiesti per il tuo progetto. Lo fa controllando i file module.toml e go.mod. In caso di problemi con l\u0026rsquo;aggiornamento, assicurati che questi file siano ancora configurati correttamente.\nQuindi riavvia semplicemente il tuo sito e verifica che tutto funzioni come previsto.\nAggiornamenti manuali #\rL\u0026rsquo;aggiornamento manuale di Blowfish richiede il download dell\u0026rsquo;ultima copia del tema e la sostituzione della vecchia versione nel progetto.\nTieni presente che ogni personalizzazione locale apportata ai file del tema andranno perse durante questo processo.\rScarica l\u0026rsquo;ultima versione del codice sorgente del tema.\nScarica da Github\rEstrai l\u0026rsquo;archivio, rinomina la cartella in \u0026ldquo;blowfish\u0026rdquo; e spostala nella directory \u0026ldquo;themes/\u0026rdquo; all\u0026rsquo;interno della cartella principale del tuo progetto Hugo. Dovrai sovrascrivere la directory esistente per sostituire tutti i file del tema.\nRiavvia il tuo sito e verifica che tutto funzioni come previsto.\n","externalUrl":null,"permalink":"/Site/it/docs/installation/","section":"Documenti","summary":"Segui semplicemente la procedura standard Avvio Rapido di Hugo per iniziare subito.\nSono riportate le istruzioni dettagliate per l\u0026rsquo;installazione. Sono disponibili anche le istruzioni per aggiornare il tema.\nInstallazione #\rQueste istruzioni ti consentiranno di iniziare a utilizzare Hugo e Blowfish partendo da uno stato completamente vuoto.","title":"Installazione","type":"docs"},{"content":"\rQuesta sezione presuppone che tu abbia già installato il tema Blowfish.\rAbbiamo appena lanciato uno strumento CLI per aiutarvi a iniziare con Blowfish. Vi aiuterà con l\u0026rsquo;installazione e la configurazione. Installate lo strumento CLI a livello globale utilizzando:\nnpx blowfish-tools I file di configurazione forniti con Blowfish contengono tutte le possibili impostazioni riconosciute dal tema. Per impostazione predefinita, molti di questi sono commentati ma puoi semplicemente decommentarli per attivare o modificare una funzionalità specifica.\nConfigurazione di base #\rPrima di creare qualsiasi contenuto, è necessario impostare alcune cose per una nuova installazione. Iniziando dal file config.toml, imposta i parametri baseURL e lingualCode. Il lingualCode dovrebbe essere impostato sulla lingua principale che utilizzerai per creare i tuoi contenuti. #\r# config/_default/hugo.toml baseURL = \u0026#34;https://your_domain.com/\u0026#34; languageCode = \u0026#34;en\u0026#34; Il passo successivo è configurare le impostazioni della lingua. Sebbene Blowfish supporti le configurazioni multilingue, per ora basta configurare la lingua principale.\nIndividua il file \u0026ldquo;languages.en.toml\u0026rdquo; nella cartella di configurazione. Se la tua lingua principale è l\u0026rsquo;inglese puoi utilizzare questo file così com\u0026rsquo;è. Altrimenti, rinominalo in modo che includa il codice della lingua corretto nel nome del file. Ad esempio, per il francese, rinominare il file in \u0026ldquo;languages.fr.toml\u0026rdquo;.\nTieni presente che il codice della lingua nel nome del file di configurazione della lingua deve corrispondere all\u0026rsquo;impostazione \u0026ldquo;languageCode\u0026rdquo; in \u0026ldquo;config.toml\u0026rdquo;.\r# config/_default/languages.en.toml title = \u0026#34;My awesome website\u0026#34; [author] name = \u0026#34;My name\u0026#34; image = \u0026#34;img/author.jpg\u0026#34; headline = \u0026#34;A generally awesome human\u0026#34; bio = \u0026#34;A little bit about me\u0026#34; links = [ { twitter = \u0026#34;https://twitter.com/username\u0026#34; } ] La configurazione [author] determina il modo in cui le informazioni sull\u0026rsquo;autore vengono visualizzate sul sito web. L\u0026rsquo;immagine deve essere posizionata nella cartella assets/. I link verranno visualizzati nell\u0026rsquo;ordine in cui sono elencati.\nSe hai bisogno di ulteriori dettagli, ulteriori informazioni su ciascuna di queste opzioni di configurazione sono trattate nella sezione Configurazione.\nSchemi di colori #\rBlowfish viene fornito con una serie di schemi di colori già pronti. Per cambiare lo schema, è sufficiente impostare il parametro del tema colorScheme. Le opzioni valide sono blowfish (default), avocado, fire, ocean, forest, princess, neon, bloody, terminal, marvel, noir, autumn, congo, andslate.\n# config/_default/params.toml colorScheme = \u0026#34;blowfish\u0026#34; Blowfish definisce una palette di tre colori che viene utilizzata in tutto il tema. Ogni colore principale contiene dieci sfumature basate sui colori inclusi in Tailwind. I tre colori principali sono utilizzati per l\u0026rsquo;intestazione, il piè di pagina e i colori d\u0026rsquo;accento. Ecco i colori per ogni schema:\nBlowfish (default) #\rAvocado #\rFire #\rOcean #\rForest #\rPrincess #\rNeon #\rBloody #\rTerminal #\rMarvel #\rNoir #\rAutumn #\rCongo #\rSlate #\rSebbene questi siano gli schemi predefiniti, è possibile crearne di propri. Per maggiori informazioni, consultare la sezione Personalizzazione avanzata.\nOrganizzazione dei contenuti #\rPer impostazione predefinita, Blowfish non obbliga a utilizzare un particolare tipo di contenuto. In questo modo si è liberi di definire il contenuto come si desidera. Potreste preferire pages per un sito statico, posts per un blog o projects per un portfolio.\nEcco una rapida panoramica di un progetto base di Blowfish. Tutti i contenuti sono inseriti nella cartella content:\n. ├── assets │ └── img │ └── author.jpg ├── config │ └── _default ├── content │ ├── _index.md │ ├── about.md │ └── posts │ ├── _index.md │ ├── first-post.md │ └── another-post │ ├── aardvark.jpg │ └── index.md └── themes └── blowfish È importante avere una conoscenza approfondita di come Hugo si aspetta che il contenuto sia organizzato, poiché il tema è progettato per sfruttare appieno i pacchetti di pagine di Hugo. Si consiglia di leggere i documentazione ufficiale di Hugo per maggiori informazioni.\nBlowfish è flessibile anche per quanto riguarda le tassonomie. Alcuni preferiscono usare tags e categories per raggruppare i loro contenuti, altri preferiscono usare topics.\nHugo usa di default post, tag e categorie e questo funziona bene se è quello che vuoi. Tuttavia, se desideri personalizzare questo aspetto, è possibile farlo creando un file di configurazione taxonomies.toml:\n# config/_default/taxonomies.toml topic = \u0026#34;topics\u0026#34; Sostituirà i predefiniti tags e categorie con topics. Fare riferimento a Hugo Taxonomy docs per ulteriori informazioni sulla denominazione delle tassonomie.\nQuando crei una nuova tassonomia, è necessario sistemare i collegamenti di navigazione sul sito web per puntare alle sezioni corrette, come spiegato di seguito.\nMenu #\rBlowfish dispone di due menu che possono essere personalizzati per adattarsi al contenuto e al layout del sito. Il menu main appare nell\u0026rsquo;intestazione del sito e il menu footer appare in fondo alla pagina, appena sopra la nota di copyright.\nEntrambi i menu sono configurati nel file menus.en.toml. Simile al file di configurazione delle lingue, se desideri utilizzare un\u0026rsquo;altra lingua, rinomina questo file e sostituisci en con il codice della lingua che si vuole utilizzare.\n# config/_default/menus.toml [[main]] name = \u0026#34;Blog\u0026#34; pageRef = \u0026#34;posts\u0026#34; weight = 10 [[main]] name = \u0026#34;Topics\u0026#34; pageRef = \u0026#34;topics\u0026#34; weight = 20 [[main]] pre = \u0026#34;github\u0026#34; name = \u0026#34;GitHub\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 30 [[main]] identifier = \u0026#34;github2\u0026#34; pre = \u0026#34;github\u0026#34; url = \u0026#34;https://github.com/nunocoracao/blowfish\u0026#34; weight = 40 [[footer]] name = \u0026#34;Privacy\u0026#34; url = \u0026#34;https://external-link\u0026#34; Il parametro name specifica il testo utilizzato nel collegamento al menu. Si può anche fornire facoltativamente un title che riempie l\u0026rsquo;attributo HTML title per il collegamento.\nIl parametro pageRef consente di fare facilmente riferimento alle pagine di contenuto e alle tassonomie di Hugo. È il modo più rapido per configurare il menu, in quanto è sufficiente fare riferimento a qualsiasi elemento di contenuto di Hugo per creare automaticamente il collegamento corretto. Per collegarsi a URL esterni, si può usare il parametro url.\nIl parametro pre consente di inserire un\u0026rsquo;icona dal [Set di icone di Blowfish] () nella voce di menu. Questo parametro può essere usato con il parametro name o da solo. Se si vogliono usare più voci di menu con le sole icone, imposta il parametro identifier, altrimenti Hugo sceglierà come id il tag di denominazione e probabilmente non visualizzerà tutte le voci di menu.\nI collegamenti al menu saranno ordinati dal più basso al più alto peso, e poi in ordine alfabetico per name.\nEntrambi i menu sono completamente opzionali e possono essere commentati se non sono necessari. Utilizzare il modello fornito nel file come guida.\nNested Menu #\rIl tema supporta anche i menu nidificati. Per usarli devi solo definire una voce genitore in menu.toml e i suoi sottomenu utilizzando il parametro parent per fare riferimento al genitore. Tutte le proprietà possono essere utilizzate per i sottomenu. pageRef e url possono essere utilizzati anche nella voce principale. I menu nidificati sono disponibili solo nel menu principale e non nel footer.\n# config/_default/menus.toml [[main]] name = \u0026#34;Parent\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 1\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 2\u0026#34; parent = \u0026#34;Parent\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 [[main]] name = \u0026#34;sub-menu 3\u0026#34; parent = \u0026#34;Parent\u0026#34; pre = \u0026#34;github\u0026#34; pageRef = \u0026#34;samples\u0026#34; weight = 20 Menu di navigazione secondario #\rInoltre, è possibile configurare un menu di sotto-navigazione. Basta definire nuove voci di menu come subnavigation in menus.toml. Questo renderà una seconda riga con le sottocategorie sotto il menu principale dell\u0026rsquo;intestazione.\n# config/_default/menus.toml [[subnavigation]] name = \u0026#34;An interesting topic\u0026#34; pageRef = \u0026#34;tags/interesting-topic\u0026#34; weight = 10 [[subnavigation]] name = \u0026#34;My Awesome Category\u0026#34; pageRef = \u0026#34;categories/awesome\u0026#34; weight = 20 Il name predefinito è il titolo di pageRef, con le caselle.\nThumbnails \u0026amp; Backgrounds #\rBlowfish è stato creato in modo che sia facile aggiungere supporto visivo ai tuoi articoli. Se hai familiarità con la struttura degli articoli di Hugo, devi solo inserire un file immagine (quasi tutti i formati sono supportati ma consigliamo .png o .jpg) che inizi con feature* all\u0026rsquo;interno della cartella dell\u0026rsquo;articolo. E questo è tutto, Blowfish sarà quindi in grado di utilizzare l\u0026rsquo;immagine sia come miniatura all\u0026rsquo;interno del tuo sito web sia per le schede oEmbed attraverso le piattaforme social.\nQui è anche una guida con maggiori informazioni e un esempio se vuoi vedere come puoi farlo.\nAdditionally, Blowfish also supports background hero images in articles and lists. In order to use a different image than the featured one, add an image file in which the name starts with background*. Inoltre, Blowfish supporta anche una background hero image in articoli ed elenchi. Per utilizzare un\u0026rsquo;immagine diversa da quella in primo piano, aggiungi un file immagine il cui nome inizia con background*.\nDettagli di configurazione #\rI passaggi precedenti rappresentano la configurazione minima. Se ora esegui hugo server ti verrà presentato un sito web Blowfish vuoto. La configurazione dettagliata è trattata nella sezione Configurazione.\n","externalUrl":null,"permalink":"/Site/it/docs/per-iniziare/","section":"Documenti","summary":"Questa sezione presuppone che tu abbia già installato il tema Blowfish.\rAbbiamo appena lanciato uno strumento CLI per aiutarvi a iniziare con Blowfish. Vi aiuterà con l\u0026rsquo;installazione e la configurazione.","title":"Per iniziare","type":"docs"},{"content":"Blowfish è un tema altamente personalizzabile e utilizza alcune delle più recenti funzionalità di Hugo per semplificarne la configurazione.\nIl tema viene fornito con una configurazione predefinita che ti consente di essere operativo con un blog di base o un sito Web statico.\nWe just launched a CLI tool to help you get started with Blowfish. It will help you with installation and configuration. Install the CLI tool globally using:\nnpx blowfish-tools I file di configurazione forniti con il tema sono forniti in formato TOML dato che questa è la sintassi predefinita di Hugo. Sentiti libero di convertire la tua configurazione in YAML o JSON se lo desideri.\nLa configurazione predefinita del tema è documentata in ogni file in modo da poter regolare liberamente le impostazioni per soddisfare le proprie esigenze.\nAs outlined in the installation instructions, you should adjust your theme configuration by modifying the files in the config/_default/ folder of your Hugo project and delete the config.toml file in your project root.\rConfigurazioni del sito #\rStandard Hugo configuration variables are respected throughout the theme, however there are some specific things that should be configured for the best experience.\nLa configurazione del sito viene gestita tramite il file config/_default/config.toml. La tabella seguente descrive tutte le impostazioni di cui si avvale Blowfish.\nTieni presente che i nomi delle variabili forniti in questa tabella utilizzano il punto per semplificare la struttura dei dati TOML (ad esempio, \u0026ldquo;outputs.home\u0026rdquo; si riferisce a \u0026ldquo;[outputs] home\u0026rdquo;).\nName Default Description theme \u0026quot;blowfish\u0026quot; Quando si utilizzano i moduli Hugo, questo valore di configurazione deve essere rimosso. Per tutti gli altri tipi di installazione, questo deve essere impostato su \u0026ldquo;blowfish\u0026rdquo; affinché il tema funzioni. baseURL Not set The URL to the root of the website. defaultContentLanguage \u0026quot;en\u0026quot; This value determines the default language of theme components and content. Refer to the language and i18n section below for supported language codes. enableRobotsTXT true Se abilitato, verrà creato un file \u0026ldquo;robots.txt\u0026rdquo; nella radice del sito che consentirà ai motori di ricerca di eseguire la scansione dell\u0026rsquo;intero sito. Se preferisci fornire il tuo file robots.txt predefinito, impostalo su false e ​​posiziona il file nella directory static. Per un controllo completo, puoi fornire un layout personalizzato per generare questo file. pagination.pagerSize 10 Il numero di articoli elencati in ciascuna pagina dell\u0026rsquo;elenco degli articoli. summaryLength 0 Il numero di parole utilizzate per generare il riepilogo dell\u0026rsquo;articolo quando non ne viene fornita una nella front matter. Un valore pari a \u0026ldquo;0\u0026rdquo; utilizzerà la prima frase. Questo valore non ha effetto quando i riepiloghi sono nascosti. outputs.home [\u0026quot;HTML\u0026quot;, \u0026quot;RSS\u0026quot;, \u0026quot;JSON\u0026quot;] I formati di output generati per il sito. Blowfish richiede HTML, RSS e JSON affinché tutti i componenti del tema funzionino correttamente. permalinks Not set Fare riferimento alla documentazione di Hugo per la configurazione del permalink. taxonomies Not set Fare riferimento alla sezione Organizzazione dei contenuti per la configurazione della tassonomia. Thumbnails #\rBlowfish è stato creato in modo che sia facile aggiungere supporto visivo ai tuoi articoli. Se hai familiarità con la struttura degli articoli di Hugo, devi solo inserire un file immagine (quasi tutti i formati sono supportati ma consigliamo .png o .jpg) che inizi con feature* all\u0026rsquo;interno della cartella dell\u0026rsquo;articolo. E questo è tutto, Blowfish sarà quindi in grado di utilizzare l\u0026rsquo;immagine sia come miniatura all\u0026rsquo;interno del tuo sito web sia per le schede oEmbed su piattaforme sociali.\nQui c\u0026rsquo;è anche una guida con maggiori informazioni e un esempio se vuoi vedere come puoi farlo.\nLingua e i18n #\rBlowfish è ottimizzato per siti Web multilingue completi e le risorse tematiche sono tradotte in diverse lingue immediatamente. La configurazione della lingua ti consente di generare più versioni dei tuoi contenuti per fornire un\u0026rsquo;esperienza personalizzata ai tuoi visitatori nella loro lingua madre.\nIl tema attualmente supporta le seguenti lingue per impostazione predefinita:\nLanguage Code Arabic ar Bulgarian bg Bengali bn Catalan ca Czech cs German de English en Esperanto eo Spanish (Spain) es Finnish fi French fr Hebrew he Croatian hr Hungarian hu Indonesian id Italian it Japanese ja Korean ko Polish pl Portuguese (Brazil) pt-br Portuguese (Portugal) pt-pt Romanian ro Russian ru Turkish tr Vietnamese vi Ukrainian uk Simplified Chinese (China) zh-cn Traditional Chinese (Taiwan) zh-tw Le traduzioni predefinite possono essere sovrascritte creando un file personalizzato in \u0026ldquo;i18n/[code].yaml\u0026rdquo; che contiene le stringhe di traduzione. Puoi anche utilizzare questo metodo per aggiungere nuove lingue. Se desideri condividere una nuova traduzione con la community, apri una richiesta pull.\nConfigurazione #\rPer essere il più flessibili possibile, è necessario creare un file di configurazione lingua per ciascuna lingua sul sito web. Per impostazione predefinita Blowfish include una configurazione della lingua inglese in config/_default/linguals.en.toml.\nIl file predefinito può essere utilizzato come modello per creare lingue aggiuntive o rinominato se desideri creare il tuo sito web in una lingua diversa dall\u0026rsquo;inglese. Basta nominare il file utilizzando il formato \u0026ldquo;lingue.[language-code].toml\u0026rdquo;.\nNota: assicurati che il parametro defaultContentLanguage nella configurazione del sito corrisponda al codice della lingua nel nome del file di configurazione della lingua.\rGlobale #\rName Default Description languageCode \u0026quot;en\u0026quot; Il codice della lingua Hugo per questo file. Può essere una lingua di livello superiore (ad esempio \u0026ldquo;en\u0026rdquo;) o una variante secondaria (ad esempio \u0026ldquo;en-au\u0026rdquo;) e deve corrispondere al codice della lingua nel nome del file. Hugo si aspetta che questo valore sia sempre in minuscolo. Per una corretta conformità HTML, imposta il parametro \u0026ldquo;isoCode\u0026rdquo; che fa distinzione tra maiuscole e minuscole. languageName \u0026quot;English\u0026quot; Il nome della lingua. weight 1 Il peso determina l\u0026rsquo;ordine delle lingue durante la creazione di siti multilingue. title \u0026quot;Blowfish\u0026quot; Il titolo del sito web. Questo verrà visualizzato nell\u0026rsquo;intestazione e nel piè di pagina del sito. Parametri #\rName Default Description params.displayName \u0026quot;EN\u0026quot; Il nome utilizzato quando la lingua appare sul sito web. params.isoCode \u0026quot;en\u0026quot; Il codice della lingua ISO per scopi di metadati HTML. Può essere una lingua di livello superiore (es. en) o una sottovariante (es. en-AU). params.rtl false Se si tratta o meno di un linguaggio RTL. Imposta su \u0026ldquo;true\u0026rdquo; per ridisporre il contenuto da destra a sinistra. Blowfish supporta pienamente l\u0026rsquo;uso simultaneo dei linguaggi RTL e LTR e si adatterà dinamicamente ad entrambi. params.dateFormat \u0026quot;2 January 2006\u0026quot; Come vengono formattate le date in questa lingua. Fare riferimento alla documentazione di Hugo per i formati accettabili. params.logo Not set Il percorso relativo al file del logo del sito all\u0026rsquo;interno della cartella \u0026ldquo;assets/\u0026rdquo;. Il file del logo deve essere fornito con una risoluzione 2x e supporta qualsiasi dimensione dell\u0026rsquo;immagine. params.secondaryLogo Not set The relative path to the secondary site logo file within the assets/ folder. The logo file should be provided at 2x resolution and supports any image dimensions. This should have an inverted/contrasting colour scheme to logo. If set, this logo will be shown when users toggle from the defaultAppearance mode. params.description Not set The website description. This will be used in the site metadata. params.copyright Not set A Markdown string for the site footer copyright message can include the placeholder { year } to dynamically insert the current year. If none is provided, Blowfish will automatically generate a copyright string using the site title. Author #\rName Default Description author.name Not set The author\u0026rsquo;s name. This will be displayed in article footers, and on the homepage when the profile layout is used. author.image Not set Path to the image file of the author. The image should be a 1:1 aspect ratio. The image can be placed in the site\u0026rsquo;s assets/ folder or can be external url. author.headline Not set A Markdown string containing the author\u0026rsquo;s headline. It will be displayed on the profile homepage under the author\u0026rsquo;s name. author.bio Not set A Markdown string containing the author\u0026rsquo;s bio. It will be displayed in article footers. author.links Not set The links to display alongside the author\u0026rsquo;s details. The config file contains example links which can simply be uncommented to enable. The order that the links are displayed is determined by the order they appear in the array. Custom links can be added by providing corresponding SVG icon assets in assets/icons/. Menus #\rBlowfish also supports language-specific menu configurations. Menu config files follow the same naming format as the languages file. Simply provide the language code in the file name to tell Hugo which language the file relates to.\nMenu config files are named with the format menus.[language-code].toml. Always ensure that the language code used in the menus configuration matches the languages configuration.\nThe Getting Started section explains more about the structure of this file. You can also refer to the Hugo menu docs for more configuration examples.\nTheme parameters #\rBlowfish provides a large number of configuration parameters that control how the theme functions. The table below outlines every available parameter in the config/_default/params.toml file.\nMany of the article defaults here can be overridden on a per article basis by specifying it in the front matter. Refer to the Front Matter section for further details.\nGlobal #\rName Default Description colorScheme \u0026quot;blowfish\u0026quot; The theme colour scheme to use. Valid values are blowfish (default), avocado, fire, ocean, forest, princess, neon, bloody, terminal, marvel, noir, autumn, congo, andslate. Refer to the Colour Schemes section for more details. defaultAppearance \u0026quot;light\u0026quot; The default theme appearance, either light or dark. autoSwitchAppearance true Whether the theme appearance automatically switches based upon the visitor\u0026rsquo;s operating system preference. Set to false to force the site to always use the defaultAppearance. enableSearch false Whether site search is enabled. Set to true to enable search functionality. Note that the search feature depends on the outputs.home setting in the site configuration being set correctly. enableCodeCopy false Whether copy-to-clipboard buttons are enabled for \u0026lt;code\u0026gt; blocks. The highlight.noClasses parameter must be set to false for code copy to function correctly. Read more about other configuration files below. mainSections Not set The sections that should be displayed in the recent articles list. If not provided the section with the greatest number of articles is used. showViews Not set Whether or not articles and list views are displayed. This requires firebase integrations to be enabled, look below. showLikes Not set Whether or not articles and list likes are displayed. This requires firebase integrations to be enabled, look below. robots Not set String that indicates how robots should handle your site. If set, it will be output in the page head. Refer to Google\u0026rsquo;s docs for valid values. disableImageZoom false Disables image zoom feature across all the images in the site. disableImageOptimization false Disables image resize and optimization features across all the images in the site. disableTextInHeader false Disables text in header, useful for logo based headers. defaultBackgroundImage Not set Default background image for both background homepage layout and background hero style defaultFeaturedImage Not set Default background image for all featured images across articles, will be overridden by a local featured image. highlightCurrentMenuArea Not set Marks menu entries in the main menu when selected smartTOC Not set Activate smart Table of Contents, items in view will be highlighted. smartTOCHideUnfocusedChildren Not set When smart Table of Contents is turned on, this will hide deeper levels of the table when they are not in focus. Header #\rName Default Description header.layout \u0026quot;basic\u0026quot; Defines the header for the entire site, supported values are basic, fixed, fixed-fill, and fixed-fill-blur. Footer #\rName Default Description footer.showMenu true Show/hide the footer menu, which can be configured in the [[footer]] section of the config/_default/menus.en.toml file. footer.showCopyright true Whether or not to show the copyright string in the site footer. Note that the string itself can be customised using the copyright parameter in the languages configuration. footer.showThemeAttribution true Whether or not to show the \u0026ldquo;powered by\u0026rdquo; theme attribution in the site footer. If you choose to disable this message, please consider attributing the theme somewhere else on your site (for example, on your about page). footer.showAppearanceSwitcher false Whether or not to show the appearance switcher in the site footer. The browser\u0026rsquo;s local storage is used to persist the visitor\u0026rsquo;s preference. footer.showScrollToTop true When set to true the scroll to top arrow is displayed. Homepage #\rName Default Description homepage.layout \u0026quot;profile\u0026quot; The layout of the homepage. Valid values are page, profile, hero, card, background, or custom. When set to custom, you must provide your own layout by creating a /layouts/partials/home/custom.html file. Refer to the Homepage Layout section for more details. homepage.homepageImage Not set Image to be used in hero and card layouts. Can be set as local image from asset directory or external image url. Refer to the Homepage Layout section for more details. homepage.showRecent false Whether or not to display the recent articles list on the homepage. homepage.showRecentItems 5 How many articles to display if showRecent is true. If variable is set to 0 or if it isn\u0026rsquo;t defined the system will default to 5 articles. homepage.showMoreLink false Whether or not to display a show more link at the end of your posts that takes the user to a predefined place. homepage.showMoreLinkDest /posts The destination of the show more button. homepage.cardView false Display recent articles as a gallery of cards. homepage.cardViewScreenWidth false Enhance the width of the recent articles card gallery to take the full width available. homepage.layoutBackgroundBlur false Makes the background image in the homepage layout blur with the scroll Article #\rName Default Description article.showDate true Whether or not article dates are displayed. article.showViews false Whether or not article views are displayed. This requires firebase integrations to be enabled, look below. article.showLikes false Whether or not article likes are displayed. This requires firebase integrations to be enabled, look below. article.showDateOnlyInArticle false Show date within article even if not displayed in article listings/cards. article.showDateUpdated false Whether or not the dates articles were updated are displayed. article.showAuthor true Whether or not the author box is displayed in the article footer. article.showAuthorBottom false Author boxes are displayed at the bottom of each page instead of the top. article.showHero false Whether the thumbnail image will be shown as a hero image within each article page. article.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. article.layoutBackgroundBlur true Makes the background image in the background article heroStyle blur with the scroll article.layoutBackgroundHeaderSpace true Add space between the header and the body. article.showBreadcrumbs false Whether or not breadcrumbs are displayed in the article header. article.showDraftLabel true Whether or not the draft indicator is shown next to articles when site is built with --buildDrafts. article.showEdit false Whether or not the link to edit the article content should be displayed. article.editURL Not set When article.showEdit is active, the URL for the edit link. article.editAppendPath true When article.showEdit is active, whether or not the path to the current article should be appended to the URL set at article.editURL. article.seriesOpened false Whether or not the series module will be displayed open by default or not. article.showHeadingAnchors true Whether or not heading anchor links are displayed alongside headings within articles. article.showPagination true Whether or not the next/previous article links are displayed in the article footer. article.invertPagination false Whether or not to flip the direction of the next/previous article links. article.showReadingTime true Whether or not article reading times are displayed. article.showTableOfContents false Whether or not the table of contents is displayed on articles. article.showRelatedContent false Display related content for each post. Might required additional configuration to your config.toml. Please check the theme config.toml if you want to enable this feature and copy all the relevant related entries. Also check Hugo\u0026rsquo;s docs on related content. article.relatedContentLimit 3 Limit of related articles to display if showRelatedContent is turned on. article.showTaxonomies false Whether or not the taxonomies related to this article are displayed. article.showAuthorsBadges false Whether the authors taxonomies are are displayed in the article or list header. This requires the setup of multiple authors and the authors taxonomy. Check this page for more details on how to configure that feature. article.showWordCount false Whether or not article word counts are displayed. article.showComments false Whether or not the comments partial is included after the article footer. article.sharingLinks Not set Which sharing links to display at the end of each article. When not provided, or set to false no links will be displayed. Available values are: \u0026ldquo;linkedin\u0026rdquo;, \u0026ldquo;twitter\u0026rdquo;, \u0026ldquo;reddit\u0026rdquo;, \u0026ldquo;pinterest\u0026rdquo;, \u0026ldquo;facebook\u0026rdquo;, \u0026ldquo;email\u0026rdquo;, \u0026ldquo;whatsapp\u0026rdquo;, and \u0026ldquo;telegram\u0026rdquo; article.showZenMode false Flag to activate Zen Mode reading feature for articles. List #\rName Default Description list.showHero false Whether the thumbnail image will be shown as a hero image within each list page. list.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. list.showBreadcrumbs false Whether or not breadcrumbs are displayed in the header on list pages. list.layoutBackgroundBlur true Makes the background image in the background list heroStyle blur with the scroll list.layoutBackgroundHeaderSpace true Add space between the header and the body. list.showTableOfContents false Whether or not the table of contents is displayed on list pages. list.showSummary false Whether or not article summaries are displayed on list pages. If a summary is not provided in the front matter, one will be auto generated using the summaryLength parameter in the site configuration. list.showViews false Whether or not list views are displayed. This requires firebase integrations to be enabled, look below. list.showLikes false Whether or not list likes are displayed. This requires firebase integrations to be enabled, look below. list.showCards false Whether or not each article is displayed as a card or as simple inline text. list.orderByWeight false Whether or not articles are sorted by weights. list.groupByYear true Whether or not articles are grouped by year on list pages. list.cardView false Display lists as a gallery of cards. list.cardViewScreenWidth false Enhance the width of card galleries in lists to take the full width available. list.constrainItemsWidth false Limit item width to prose to increase readability. Useful when no feature images are available. list.showTableOfContents false Whether or not the table of contents is displayed on articles. Sitemap #\rName Default Description sitemap.excludedKinds [\u0026quot;taxonomy\u0026quot;, \u0026quot;term\u0026quot;] Kinds of content that should be excluded from the generated /sitemap.xml file. Refer to the Hugo docs for acceptable values. Taxonomy #\rName Default Description taxonomy.showTermCount true Whether or not the number of articles within a taxonomy term is displayed on the taxonomy listing. taxonomy.showHero false Whether the thumbnail image will be shown as a hero image within each taxonomy page. taxonomy.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. taxonomy.showBreadcrumbs false Whether or not breadcrumbs are displayed in the taxonomy header. taxonomy.showViews false Whether or not article views are displayed. This requires firebase integrations to be enabled, look below. taxonomy.showLikes false Whether or not article likes are displayed. This requires firebase integrations to be enabled, look below. taxonomy.showTableOfContents false Whether or not the table of contents is displayed on taxonomies. taxonomy.cardView false Display lists as a gallery of cards. Term #\rName Default Description term.showHero false Whether the thumbnail image will be shown as a hero image within each term page. term.heroStyle Not set Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. term.showBreadcrumbs false Whether or not breadcrumbs are displayed in the term header. term.showViews false Whether or not article views are displayed. This requires firebase integrations to be enabled, look below. term.showLikes false Whether or not article likes are displayed. This requires firebase integrations to be enabled, look below. term.showTableOfContents false Whether or not the table of contents is displayed on terms. term.groupByYear false Whether or not articles are grouped by year on term pages. term.cardView false Display lists as a gallery of cards. term.cardViewScreenWidth false Enhance the width of card galleries in lists to take the full width available. Firebase #\rName Default Description firebase.apiKey Not set Firebase apiKey, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.authDomain Not set Firebase authDomain, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.projectId Not set Firebase projectId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.storageBucket Not set Firebase storageBucket, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.messagingSenderId Not set Firebase messagingSenderId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.appId Not set Firebase appId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. firebase.measurementId Not set Firebase measurementId, required to integrate against Firebase. Check this page for a guide on how to integrate Firebase into Blowfish. Fathom Analytics #\rName Default Description fathomAnalytics.site Not set The site code generated by Fathom Analytics for the website. Refer to the Analytics docs for more details. fathomAnalytics.domain Not set If using a custom domain with Fathom Analytics, provide it here to serve script.js from the custom domain. Umami Analytics #\rName Default Description umamiAnalytics.websiteid Not set The site code generated by Umami Analytics for the website. Refer to the Analytics docs for more details. umamiAnalytics.domain Not set If using a custom domain with Umami Analytics, provide it here to serve script.js from the custom domain. umamiAnalytics.dataDomains Not set If you want the tracker to only run on specific domains, provide it for your tracker script. This is a comma delimited list of domain names. Such as \u0026ldquo;yoursite.com,yoursite2.com\u0026rdquo;. umamiAnalytics.enableTrackEvent true When set to true track event will add automatically. If you do not want to add track event, set it to false. Seline Analytics #\rName Default Description selineAnalytics.token Not set The token generated by Seline Analytics for the website. Refer to the Analytics docs for more details. selineAnalytics.enableTrackEvent true When set to true track event will add automatically. If you do not want to add track event, set it to false. BuyMeACoffee #\rName Default Description buymeacoffee.identifier Not set The identifier to the target buymeacoffee account. buymeacoffee.globalWidget Not set Activate the global buymeacoffee widget. buymeacoffee.globalWidgetMessage Not set Message what will be displayed the first time a new user lands on the site. buymeacoffee.globalWidgetColor Not set Widget color in hex format. buymeacoffee.globalWidgetPosition Not set Position of the widget, i.e. \u0026ldquo;Left\u0026rdquo; or \u0026ldquo;Right\u0026rdquo; Verifications #\rName Default Description verification.google Not set The site verification string provided by Google to be included in the site metadata. verification.bing Not set The site verification string provided by Bing to be included in the site metadata. verification.pinterest Not set The site verification string provided by Pinterest to be included in the site metadata. verification.yandex Not set The site verification string provided by Yandex to be included in the site metadata. Other configuration files #\rThe theme also includes a markup.toml configuration file. This file contains some important parameters that ensure that Hugo is correctly configured to generate sites built with Blowfish.\nAlways ensure this file is present in the config directory and that the required values are set. Failure to do so may cause certain features to function incorrectly and could result in unintended behaviour.\n","date":"14 agosto 2020","externalUrl":null,"permalink":"/Site/it/docs/configurazioni/","section":"Documenti","summary":"Blowfish è un tema altamente personalizzabile e utilizza alcune delle più recenti funzionalità di Hugo per semplificarne la configurazione.\nIl tema viene fornito con una configurazione predefinita che ti consente di essere operativo con un blog di base o un sito Web statico.","title":"Configurazione","type":"docs"},{"content":"Blowfish fornisce un layout della home page completamente flessibile. Sono disponibili due modelli principali tra cui scegliere con impostazioni aggiuntive per adattare il design. In alternativa, puoi anche fornire il tuo modello e avere il controllo completo sul contenuto della home page.\nIl layout della home page è controllato dall\u0026rsquo;impostazione homepage.layout nel file di configurazione params.toml. Inoltre, tutti i layout hanno la possibilità di includere un elenco di articoli recenti.\nProfile layout #\rIl layout predefinito è quello del profilo, ideale per i siti web e i blog personali. Mette i dettagli dell\u0026rsquo;autore in primo piano, fornendo un\u0026rsquo;immagine e i link ai profili sociali.\nLe informazioni sull\u0026rsquo;autore sono fornite nel file di configurazione delle lingue. Fare riferimento alle sezioni Guida introduttiva e Configurazione della lingua per i dettagli sui parametri.\nInoltre, qualsiasi contenuto Markdown fornito nel contenuto della homepage sarà collocato sotto il profilo dell\u0026rsquo;autore. Ciò consente una maggiore flessibilità per la visualizzazione di una biografia o di altri contenuti personalizzati utilizzando gli shortcode.\nPer abilitare il layout del profilo, impostare homepage.layout = “profile” nel file di configurazione params.toml.\nPage layout #\rIl layout di pagina è semplicemente una normale pagina di contenuto che visualizza il contenuto Markdown. È ottimo per i siti web statici e offre una grande flessibilità. Per abilitare il layout di pagina, impostare homepage.layout = “page” nel file di configurazione params.toml.\nHero layout #\rIl layout hero riunisce le idee dei layout profilo e scheda. Questo non solo mostra le informazioni sull\u0026rsquo;autore del sito, ma carica anche il markdown sotto di esso.\nPer abilitare il layout Hero, impostare homepage.layout = “hero” e homepage.homepageImage nel file di configurazione params.toml.\nBackground layout #\rIl layout di sfondo è una versione più fluida del layout Hero. Come nel layout Hero, anche in questo caso vengono visualizzate le informazioni sull\u0026rsquo;autore del sito e viene caricato il markdown sotto di esso.\nPer abilitare il layout di sfondo, impostare homepage.layout = “background” e homepage.homepageImage nel file di configurazione params.toml.\nCard layout #\rIl layout delle schede è un\u0026rsquo;estensione del layout di pagina. Offre lo stesso livello di flessibilità, visualizzando anche i contenuti markdown e aggiungendo un\u0026rsquo;immagine per visualizzare i contenuti visivi.\nPer abilitare il layout a scheda, impostare homepage.layout = “card” e homepage.homepageImage nel file di configurazione params.toml.\nCustom layout #\rSe i layout integrati della homepage non sono sufficienti per le vostre esigenze, avete la possibilità di creare un layout personalizzato. Questo permette di avere un controllo totale sul contenuto della pagina e fornisce essenzialmente una lavagna vuota con cui lavorare.\nPer abilitare il layout personalizzato, impostare homepage.layout = “custom” nel file di configurazione params.toml.\nCon il valore di configurazione impostato, creare un nuovo file custom.html e collocarlo in layouts/partials/home/custom.html. Ora tutto ciò che è contenuto nel file custom.html sarà collocato nell\u0026rsquo;area dei contenuti della homepage del sito. È possibile utilizzare qualsiasi funzione HTML, Tailwind o Hugo per definire il layout.\nPer includere articoli recenti nel layout personalizzato, utilizzare il partial recent-articles/main.html.\nAd esempio, la homepage di questo sito utilizza il layout personalizzato per consentire di passare dal layout del profilo a quello della pagina. Visitare il repo GitHub per vedere come funziona.\nArticoli recenti #\rTutti i layout delle homepage hanno la possibilità di visualizzare gli articoli recenti sotto il contenuto della pagina principale. Per attivarla, è sufficiente impostare l\u0026rsquo;opzione homepage.showRecent a true nel file di configurazione params.toml.\nGli articoli elencati in questa sezione sono derivati dall\u0026rsquo;impostazione mainSections, che consente di utilizzare i tipi di contenuto del sito web. Per esempio, se si hanno sezioni di contenuto per post e progetti, si può impostare questa impostazione su [“post”, “progetti”] e tutti gli articoli di queste due sezioni saranno utilizzati per popolare l\u0026rsquo;elenco dei recenti. Il tema si aspetta che questa impostazione sia un array, quindi se si utilizza una sola sezione per tutti i contenuti, è necessario impostarla di conseguenza: [“blog”].\nThumbnails #\rBlowfish è stato creato in modo che sia facile aggiungere supporto visivo ai tuoi articoli. Se hai familiarità con la struttura dell\u0026rsquo;articolo di Hugo, devi solo inserire un file immagine (quasi tutti i formati sono supportati ma consigliamo .png o .jpg) che inizi con feature* all\u0026rsquo;interno della cartella dell\u0026rsquo;articolo. E questo è tutto, Blowfish sarà quindi in grado di utilizzare l\u0026rsquo;immagine sia come miniatura all\u0026rsquo;interno del tuo sito web sia per le schede oEmbed su piattaforme sociali.\nQui si trova una guida con maggiori informazioni e un sample se si vuole vedere un esempio.\nCard Gallery #\rBlowfish supporta anche la visualizzazione degli elenchi standard di articoli come gallerie di schede. È possibile configurare questo sia per la sezione recente nella homepage che per gli elenchi di articoli nel sito web. Per la homepage si può usare homepage.cardView e homepage.cardViewScreenWidth; per gli elenchi si può usare list.cardView e list.cardViewScreenWidth. Per maggiori dettagli, consultare i [docs di configurazione] (https://sipsigrupo.github.io:1313/Site/it/docs/configurazioni/) e la homepage per una dimostrazione dal vivo.\n","externalUrl":null,"permalink":"/Site/it/docs/homepage-layout/","section":"Documenti","summary":"Blowfish fornisce un layout della home page completamente flessibile. Sono disponibili due modelli principali tra cui scegliere con impostazioni aggiuntive per adattare il design. In alternativa, puoi anche fornire il tuo modello e avere il controllo completo sul contenuto della home page.","title":"Homepage Layout","type":"docs"},{"content":"Oltre ai parametri predefiniti della parte frontale di Hugo, Blowfish aggiunge una serie di opzioni aggiuntive per personalizzare la presentazione dei singoli articoli . Tutti i parametri disponibili per la parte frontale del tema sono elencati di seguito.\nI valori predefiniti dei parametri del front metter vengono ereditati dalla configurazione di base del tema, quindi devi specificare questi parametri nella parte iniziale solo quando desideri sovrascrivere quelli predefiniti.\nName Default Description title Not set Il nome dell\u0026rsquo;articolo. description Not set La descrizione testuale dell\u0026rsquo;articolo. Viene utilizzato nei metadati HTML. externalUrl Not set Se questo articolo è pubblicato su un sito Web di terze parti, l\u0026rsquo;URL di questo articolo. Fornire un URL impedirà la generazione di una pagina di contenuto e qualsiasi riferimento a questo articolo si collegherà direttamente al sito Web di terze parti. editURL article.editURL Quando \u0026ldquo;showEdit\u0026rdquo; è attivo, l\u0026rsquo;URL per il collegamento di modifica. editAppendPath article.editAppendPath Quando \u0026ldquo;showEdit\u0026rdquo; è attivo, indica se il percorso dell\u0026rsquo;articolo corrente deve essere aggiunto o meno all\u0026rsquo;URL impostato in \u0026ldquo;editURL\u0026rdquo;. groupByYear list.groupByYear Se gli articoli sono raggruppati o meno per anno nelle pagine di elenco. menu Not set Quando viene fornito un valore, nei menu denominati verrà visualizzato un collegamento a questo articolo. I valori validi sono \u0026ldquo;main\u0026rdquo; o \u0026ldquo;footer\u0026rdquo;. robots Not set Stringa che indica come i robots dovrebbero gestire questo articolo. Se impostato, verrà visualizzato nell\u0026rsquo;intestazione della pagina. Fare riferimento ai documenti di Google per i valori validi. sharingLinks article.sharingLinks Quali link di condivisione visualizzare alla fine di questo articolo. Se non fornito o impostato su \u0026ldquo;false\u0026rdquo;, non verrà visualizzato alcun collegamento. showAuthor article.showAuthor Se la casella dell\u0026rsquo;autore predefinito viene visualizzata o meno nel piè di pagina dell\u0026rsquo;articolo. authors Not set Matrice di valori per gli autori, se impostata sovrascrive le impostazioni di \u0026ldquo;showAuthor\u0026rdquo; per la pagina o il sito. Utilizzato nella funzionalità per più autori, controlla questa pagina per maggiori dettagli su come configurare tale funzionalità. showAuthorsBadges article.showAuthorsBadges Se le tassonomie degli \u0026ldquo;autori\u0026rdquo; vengono visualizzate nell\u0026rsquo;articolo o nell\u0026rsquo;intestazione dell\u0026rsquo;elenco. Ciò richiede l\u0026rsquo;impostazione di \u0026ldquo;autori multipli\u0026rdquo; e la tassonomia degli \u0026ldquo;autori\u0026rdquo;. Controlla questa pagina per maggiori dettagli su come configurare questa funzione. featureimage Not set URL esterno per l\u0026rsquo;immagine in primo piano featureimagecaption Not set Didascalia per l\u0026rsquo;immagine in primo piano. Visualizzato solo in heroStyle \u0026ldquo;big\u0026rdquo;. showHero article.showHero Se l\u0026rsquo;immagine in miniatura verrà mostrata come immagine hero all\u0026rsquo;interno della pagina dell\u0026rsquo;articolo. heroStyle article.heroStyle Stile per visualizzare l\u0026rsquo;immagine hero, le opzioni valide sono: basic, big, background, thumbAndBackground. showBreadcrumbs article.showBreadcrumbs or list.showBreadcrumbs Se i breadcrumb vengono visualizzati nell\u0026rsquo;articolo o nell\u0026rsquo;intestazione dell\u0026rsquo;elenco. showDate article.showDate Se viene visualizzata o meno la data dell\u0026rsquo;articolo. La data viene impostata utilizzando il parametro \u0026ldquo;data\u0026rdquo;. showDateUpdated article.showDateUpdated Se viene visualizzata o meno la data di aggiornamento dell\u0026rsquo;articolo. La data viene impostata utilizzando il parametro \u0026ldquo;lastmod\u0026rdquo;. showEdit article.showEdit Se deve essere visualizzato o meno il collegamento per modificare il contenuto dell\u0026rsquo;articolo. showHeadingAnchors article.showHeadingAnchors Se i collegamenti di ancoraggio dei titoli vengono visualizzati o meno insieme ai titoli all\u0026rsquo;interno di questo articolo. showPagination article.showPagination Se i collegamenti all\u0026rsquo;articolo successivo/precedente vengono visualizzati o meno nel piè di pagina dell\u0026rsquo;articolo. invertPagination article.invertPagination Se invertire o meno la direzione dei collegamenti all\u0026rsquo;articolo successivo/precedente. showReadingTime article.showReadingTime Se viene visualizzato o meno il tempo di lettura dell\u0026rsquo;articolo. showTaxonomies article.showTaxonomies Se vengono visualizzate o meno le tassonomie correlate a questo articolo. showTableOfContents article.showTableOfContents Se il sommario viene visualizzato o meno in questo articolo. showWordCount article.showWordCount Se viene visualizzato o meno il conteggio delle parole dell\u0026rsquo;articolo. showComments article.showComments Se il commenti parziali è incluso o meno dopo il piè di pagina dell\u0026rsquo;articolo. showSummary list.showSummary Se il riepilogo dell\u0026rsquo;articolo deve essere visualizzato o meno nelle pagine di elenco. showViews article.showViews Se le visualizzazioni degli articoli devono essere visualizzate o meno negli elenchi e nella visualizzazione dettagliata. Ciò richiede un\u0026rsquo;integrazione Firebase. Controlla questa pagina per una guida su come integrare Firebase in Blowfish showLikes article.showLikes Se l\u0026rsquo;articolo piace o meno deve essere visualizzato negli elenchi e nella vista dettagliata. Ciò richiede un\u0026rsquo;integrazione Firebase. Controlla questa pagina per una guida su come integrare Firebase in Blowfish seriesOpened article.seriesOpened Se il modulo della serie verrà visualizzato aperto per impostazione predefinita o meno. series Not set Matrice di serie a cui appartiene l\u0026rsquo;articolo, si consiglia di utilizzare una sola serie per articolo. series_order Not set Numero dell\u0026rsquo;articolo all\u0026rsquo;interno della serie. summary Auto generated using summaryLength (see site configuration) Quando \u0026ldquo;showSummary\u0026rdquo; è abilitato, questa è la stringa Markdown da utilizzare come riepilogo per questo articolo. xml true unless excluded by sitemap.excludedKinds Se questo articolo è incluso o meno nel file /sitemap.xml generato. layoutBackgroundBlur true Rende l\u0026rsquo;immagine di sfondo sullo sfondo heroStyle sfocata con lo scorrimento. layoutBackgroundHeaderSpace true Aggiungi spazio tra l\u0026rsquo;intestazione e il body. title Not set The name of the article. description Not set The text description for the article. It is used in the HTML metadata. externalUrl Not set If this article is published on a third-party website, the URL to this article. Providing a URL will prevent a content page being generated and any references to this article will link directly to the third-party website. editURL article.editURL When showEdit is active, the URL for the edit link. editAppendPath article.editAppendPath When showEdit is active, whether or not the path to the current article should be appended to the URL set at editURL. groupByYear list.groupByYear Whether or not articles are grouped by year on list pages. menu Not set When a value is provided, a link to this article will appear in the named menus. Valid values are main or footer. robots Not set String that indicates how robots should handle this article. If set, it will be output in the page head. Refer to Google\u0026rsquo;s docs for valid values. sharingLinks article.sharingLinks Which sharing links to display at the end of this article. When not provided, or set to false no links will be displayed. showAuthor article.showAuthor Whether or not the author box for the default author is displayed in the article footer. showAuthorBottom article.showAuthorBottom Author boxes are displayed at the bottom of each page instead of the top. authors Not set Array of values for authors, if set it overrides showAuthor settings for page or site. Used on the multiple authors feature, check this page for more details on how to configure that feature. showAuthorsBadges article.showAuthorsBadges Whether the authors taxonomies are are displayed in the article or list header. This requires the setup of multiple authors and the authors taxonomy. Check this page for more details on how to configure that feature. featureimage Not set External URL for feature image featureimagecaption Not set Caption for feature image. Only displayed in heroStyle big showHero article.showHero Whether the thumbnail image will be shown as a hero image within the article page. heroStyle article.heroStyle Style to display the hero image, valid options are: basic, big, background, thumbAndBackground. showBreadcrumbs article.showBreadcrumbs or list.showBreadcrumbs Whether the breadcrumbs are displayed in the article or list header. showDate article.showDate Whether or not the article date is displayed. The date is set using the date parameter. showDateUpdated article.showDateUpdated Whether or not the date the article was updated is displayed. The date is set using the lastmod parameter. showEdit article.showEdit Whether or not the link to edit the article content should be displayed. showHeadingAnchors article.showHeadingAnchors Whether or not heading anchor links are displayed alongside headings within this article. showPagination article.showPagination Whether or not the next/previous article links are displayed in the article footer. invertPagination article.invertPagination Whether or not to flip the direction of the next/previous article links. showReadingTime article.showReadingTime Whether or not the article reading time is displayed. showTaxonomies article.showTaxonomies Whether or not the taxonomies that relate to this article are displayed. showTableOfContents article.showTableOfContents Whether or not the table of contents is displayed on this article. showWordCount article.showWordCount Whether or not the article word count is displayed. showComments article.showComments Whether or not the comments partial is included after the article footer. showSummary list.showSummary Whether or not the article summary should be displayed on list pages. showViews article.showViews Whether or not the article views should be displayed in lists and detailed view. This requires a firebase integration. Check this page for a guide on how to integrate Firebase into Blowfish showLikes article.showLikes Whether or not the article likes should be displayed in lists and detailed view. This requires a firebase integration. Check this page for a guide on how to integrate Firebase into Blowfish seriesOpened article.seriesOpened Whether or not the series module will be displayed open by default or not. series Not set Array of series the article belongs to, we recommend using only one series per article. series_order Not set Number of the article within the series. summary Auto generated using summaryLength (see site configuration) When showSummary is enabled, this is the Markdown string to be used as the summary for this article. xml true unless excluded by sitemap.excludedKinds Whether or not this article is included in the generated /sitemap.xml file. layoutBackgroundBlur true Makes the background image in the background heroStyle blur with the scroll layoutBackgroundHeaderSpace true Add space between the header and the body. ","externalUrl":null,"permalink":"/Site/it/docs/front-matter/","section":"Documenti","summary":"Oltre ai parametri predefiniti della parte frontale di Hugo, Blowfish aggiunge una serie di opzioni aggiuntive per personalizzare la presentazione dei singoli articoli . Tutti i parametri disponibili per la parte frontale del tema sono elencati di seguito.","title":"Front Matter","type":"docs"},{"content":"Some websites have more than one author contributing with content and therefore require more than a single default author across the entire website. For those use-cases, Blowfish allows users to extend the list of authors using the multiple authors feature.\nTo keep everything backwards compatible, this feature only allows the definition of extra authors and does not change in any way the previous author functionality which is used via config files.\nCreate Authors #\rThe first step to create new authors is to set up a new folder in ./data/authors. Then you can simply add new json files inside, one for each new author. The name of the file will be the key for that author when referencing it in your articles.\nAs an example, let’s create a file called nunocoracao.json within ./data/authors. The contents of the file should be similar to the ones below. name, image, bio, and social are the 4 parameters supported right for authors. They mimic the configurations available for the default author in the config files.\nNote: the key in the social object will be used to fetch one of the theme’s icons, feel free to use any of the icons available in your setup.\n{ \u0026#34;name\u0026#34;: \u0026#34;Nuno Coração\u0026#34;, \u0026#34;image\u0026#34; : \u0026#34;img/nuno_avatar.jpg\u0026#34;, \u0026#34;bio\u0026#34;: \u0026#34;Theme Creator\u0026#34;, \u0026#34;social\u0026#34;: [ { \u0026#34;linkedin\u0026#34;: \u0026#34;https://linkedin.com/in/nunocoracao\u0026#34; }, { \u0026#34;twitter\u0026#34;: \u0026#34;https://twitter.com/nunocoracao\u0026#34; }, { \u0026#34;instagram\u0026#34;: \u0026#34;https://instagram.com/nunocoracao\u0026#34; }, { \u0026#34;medium\u0026#34;: \u0026#34;https://medium.com/@nunocoracao\u0026#34; }, { \u0026#34;github\u0026#34;: \u0026#34;https://github.com/nunocoracao\u0026#34; }, { \u0026#34;goodreads\u0026#34;: \u0026#34;http://goodreads.com/nunocoracao\u0026#34; }, { \u0026#34;keybase\u0026#34;: \u0026#34;https://keybase.io/nunocoracao\u0026#34; }, { \u0026#34;reddit\u0026#34;: \u0026#34;https://reddit.com/user/nunoheart\u0026#34; } ] } Reference Authors in Articles #\rNow that you created one author, the next step is to reference it in one or more articles. In the example below, we reference the author created in the previous step using its key.\nThis will render an extra author using the data provided in the json file. This feature does not change in any way the default author configured for the overall site, and therefore, you can control both separately. Using the showAuthor parameter, you can configure whether to show the default author, that is the normal use-case for a single author blog. The new authors front-matter parameter allows you to define authors specifically to an article, and they will be rendered independently of the configurations for the default site author.\n--- title: \u0026#34;Multiple Authors\u0026#34; date: 2020-08-10 draft: false description: \u0026#34;Configure multiple authors for your articles.\u0026#34; slug: \u0026#34;multi-author\u0026#34; tags: [\u0026#34;authors\u0026#34;, \u0026#34;config\u0026#34;, \u0026#34;docs\u0026#34;] showAuthor: true authors: - \u0026#34;nunocoracao\u0026#34; showAuthorsBadges : false --- In the example, which matches the markdown of the current page, both the default author and the new one will be displayed. You can scroll now to see the outcome.\nCreate the Authors Taxonomy #\rTo get lists of articles for each of your authors you can configure the authors taxonomy, which opens up some more configurations that might be interesting. This is an optional step in the process that is not required to display the authors in your articles.\nFirst step is to configure the authors taxonomy in your config.toml file, like in the example below. Even though tag and category are defined by default with Hugo, once you add a specific taxonomies section you need to add them again otherwise the site will not process them.\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; And that’s just about it. Now you will have pages that reference your authors and, for each, show the respective list of articles where they participate. You can also use the article.showAuthorsBadges on the config file, or showAuthorsBadges on each article to chose whether to display the authors taxonomy as badges in each post item. As an example, this doc is configured to not display authors but if you look at the sample referenced below you will see the authors displayed as badges.\nLastly, you can add more detail to each author page so that it displays a little bio, links, or whatever information fits your use-case. To achieve that, create a folder with the key to each author inside ./content/authors and inside each folder place a _index.md file. For the example above, we would end up with a .content/authors/nunocoracao/_index.md file. Inside, you can configure the actual name of the author and the contents of their page. Authors in this documentation website are configured like this, so you can have a look by playing around with the site.\n--- title: \u0026#34;Nuno Coração\u0026#34; --- Nuno\u0026#39;s awesome dummy bio. Sample #\rThis sample sample below shows an example where the default site author is turned off and the article has multiple authors.\n","externalUrl":null,"permalink":"/Site/it/docs/multi-author/","section":"Documenti","summary":"Some websites have more than one author contributing with content and therefore require more than a single default author across the entire website. For those use-cases, Blowfish allows users to extend the list of authors using the multiple authors feature.","title":"Multiple Authors","type":"docs"},{"content":"\rAnalytics #\rBlowfish provides built-in support for Fathom Analytics and Google Analytics. Fathom is a paid alternative to Google Analytics that respects user privacy.\nFathom Analytics #\rTo enable Fathom Analytics support, simply provide your Fathom site code in the config/_default/params.toml file. If you also use the custom domain feature of Fathom and would like to serve their script from your domain, you can also additionally provide the domain configuration value. If you don\u0026rsquo;t provide a domain value, the script will load directly from Fathom DNS.\n# config/_default/params.toml [fathomAnalytics] site = \u0026#34;ABC12345\u0026#34; domain = \u0026#34;llama.yoursite.com\u0026#34; Google Analytics #\rGoogle Analytics support is provided through the internal Hugo partial. Simply provide the googleAnalytics key in the config/_default/config.toml file and the script will be added automatically.\nBoth version 3 (analytics.js) and version 4 (gtag.js) are supported, based on the configuration value provided:\n# config/_default/config.toml # version 3 googleAnalytics = \u0026#34;UA-PROPERTY_ID\u0026#34; # version 4 googleAnalytics = \u0026#34;G-MEASUREMENT_ID\u0026#34; Umami Analytics #\rTo enable Umami Analytics support, simply provide your Umami tracking code in the config/_default/params.toml file. If you also use the custom domain feature of Umami and would like to serve their script from your domain, you can also additionally provide the domain configuration value. If you don\u0026rsquo;t provide a domain value, the script will load directly from Umami DNS (analytics.umami.is). If you want the tracker to only run on specific domains, you can provide the dataDomains configuration value. If you don\u0026rsquo;t provide a dataDomains value, the script will run on any website where the domain and websiteid match.\nNote: If you enable Umami Analytics, Blowfish will support Umami Track Event automatically. If you do not want to support Track Event, the param enableTrackEvent must set to false.\r# config/_default/params.toml [umamiAnalytics] websiteid = \u0026#34;ABC12345\u0026#34; domain = \u0026#34;llama.yoursite.com\u0026#34; dataDomains = \u0026#34;yoursite.com,yoursite2.com\u0026#34; enableTrackEvent = true Seline Analytics #\rTo enable Seline Analytics support, simply provide your Seline token in the config/_default/params.toml file.\nNote: If you enable Seline Analytics, Blowfish will support Seline Track Event automatically. If you do not want to support Track Event, the param enableTrackEvent must set to false.\r# config/_default/params.toml [selineAnalytics] token = \u0026#34;XXXXXX\u0026#34; enableTrackEvent = true Custom analytics providers #\rIf you wish to use a different analytics provider on your website you can also override the analytics partial and provide your own script. Simply create the file layouts/partials/extend-head.html in your project and it will automatically include it in the \u0026lt;head\u0026gt; of the website.\nComments #\rTo add comments to your articles, Blowfish includes support for a comments partial that is included at the base of each article page. Simply provide a layouts/partials/comments.html which contains the code required to display your chosen comments.\nYou can use either the built-in Hugo Disqus template, or provide your own custom code. Refer to the Hugo docs for further information.\nOnce the partial has been provided, finer control over where comments are displayed is then managed using the showComments parameter. This value can be set at the theme level in the params.toml config file, or on a per-article basis by including it in the front matter. The parameter defaults to false so it must be set to true in one of these locations in order for comments to be displayed.\nFavicons #\rBlowfish provides a default set of blank favicons to get started but you can provide your own assets to override them. The easiest way to obtain new favicon assets is to generate them using a third-party provider like favicon.io.\nIcon assets should be placed directly in the static/ folder of your website and named as per the listing below. If you use favicon.io, these will be the filenames that are automatically generated for you, but you can provide your own assets if you wish.\nstatic/ ├─ android-chrome-192x192.png ├─ android-chrome-512x512.png ├─ apple-touch-icon.png ├─ favicon-16x16.png ├─ favicon-32x32.png ├─ favicon.ico └─ site.webmanifest Alternatively, you can also completely override the default favicon behaviour and provide your own favicon HTML tags and assets. Simply provide a layouts/partials/favicons.html file in your project and this will be injected into the site \u0026lt;head\u0026gt; in place of the default assets.\nIcon #\rSimilar to the icon shortcode, you can include icons in your own templates and partials by using Blowfish\u0026rsquo;s icon.html partial. The partial takes one parameter which is the name of the icon to be included.\nExample:\n{{ partial \u0026#34;icon.html\u0026#34; \u0026#34;github\u0026#34; }} Icons are populated using Hugo pipelines which makes them very flexible. Blowfish includes a number of built-in icons for social, links and other purposes. Check the icon samples page for a full list of supported icons.\nCustom icons can be added by providing your own icon assets in the assets/icons/ directory of your project. The icon can then be referenced in the partial by using the SVG filename without the .svg extension.\nIcons can also be used in article content by calling the icon shortcode.\nExtensions #\rBlowfish also provides for a number of extension partials that allow for expanding upon base functionality.\nArticle link #\rIf you wish to insert additional code after article links, create a layouts/partials/extend-article-link.html file. This is especially powerful when combined with the badge shortcode which can be used to highlight metadata for certain articles.\nHead and Footer #\rThe theme allows for inserting additional code directly into the \u0026lt;head\u0026gt; and \u0026lt;footer\u0026gt; sections of the template. These can be useful for providing scripts or other logic that isn\u0026rsquo;t part of the theme.\nSimply create either layouts/partials/extend-head.html or layouts/partials/extend-footer.html and these will automatically be included in your website build. Both partials are injected as the last items in \u0026lt;head\u0026gt; and \u0026lt;footer\u0026gt; so they can be used to override theme defaults.\n","externalUrl":null,"permalink":"/Site/it/docs/partials/","section":"Documenti","summary":"Analytics #\rBlowfish provides built-in support for Fathom Analytics and Google Analytics. Fathom is a paid alternative to Google Analytics that respects user privacy.\nFathom Analytics #\rTo enable Fathom Analytics support, simply provide your Fathom site code in the config/_default/params.","title":"Partials","type":"docs"},{"content":"If you\u0026rsquo;ve been reading the documentation in order, you should now know about all the features and configurations available in Blowfish. This page is designed to pull everything together and offer some worked examples that you might like to use in your Hugo project.\nTip: If you\u0026rsquo;re new to Hugo, be sure to check out the official docs to learn more about the concept of page bundles and resources.\rThe examples on this page can all be adapted to different scenarios but hopefully give you some ideas about how to approach formatting a particular content item for your individual project.\nBranch pages #\rBranch page bundles in Hugo cover items like the homepage, section listings, and taxonomy pages. The important thing to remember about branch bundles is that the filename for this content type is _index.md.\nBlowfish will honour the front matter parameters specified in branch pages and these will override the default settings for that particular page. For example, setting the title parameter in a branch page will allow overriding the page title.\nHomepage #\rLayout: layouts/index.html Content: content/_index.md The homepage in Blowfish is special in that it\u0026rsquo;s overarching design is controlled by the homepage layout config parameter. You can learn more about this in the Homepage Layout section.\nIf you want to add custom content to this page, you simply need to create a content/_index.md file. Anything in this file will then be included in your homepage.\nExample:\n--- title: \u0026#34;Welcome to Blowfish!\u0026#34; description: \u0026#34;This is a demo of adding content to the homepage.\u0026#34; --- Welcome to my website! I\u0026#39;m really happy you stopped by. This example sets a custom title and adds some additional text to the body of the page. Any Markdown formatted text is acceptable, including shortcodes, images and links.\nList pages #\rLayout: layouts/_default/list.html Content: content/../_index.md List pages group all the pages within into a section and provide a way for visitors to reach each page. A blog or portfolio are examples of a list page as they group together posts or projects.\nCreating a list page is as simple as making a sub-directory in the content folder. For example, to create a \u0026ldquo;Projects\u0026rdquo; section, you would create content/projects/. Then create a Markdown file for each of your projects.\nA list page will be generated by default, however to customise the content, you should also create an _index.md page in this new directory.\n. └── content └── projects ├── _index.md # /projects ├── first-project.md # /projects/first-project └── another-project ├── index.md # /projects/another-project └── project.jpg Hugo will generate URLs for the pages in your projects folder accordingly.\nJust like the homepage, content in the _index.md file will be output into the generated list index. Blowfish will then list any pages in this section below the content.\nExample:\n--- title: \u0026#34;Projects\u0026#34; description: \u0026#34;Learn about some of my projects.\u0026#34; cascade: showReadingTime: false --- This section contains all my current projects. In this example, the special cascade parameter is being used to hide the reading time on any sub-pages within this section. By doing this, any project pages will not have their reading time showing. This is a great way to override default theme parameters for an entire section without having to include them in every individual page.\nThe samples section of this site is an example of a list page.\nTaxonomy pages #\rList layout: layouts/_default/taxonomy.html Term layout: layouts/_default/term.html Content: content/../_index.md Taxonomy pages come in two forms - taxonomy lists and taxonomy terms. Lists display a listing of each of the terms within a given taxonomy, while terms display a list of pages that are related to a given term.\nThe terminology can get a little confusing so let\u0026rsquo;s explore an example using a taxonomy named animals.\nFirstly, to use taxonomies in Hugo, they have to be configured. This is done by creating a config file at config/_default/taxonomies.toml and defining the taxonomy name.\n# config/_default/taxonomies.toml animal = \u0026#34;animals\u0026#34; Hugo expects taxonomies to be listed using their singular and plural forms, so we add the singular animal equals the plural animals to create our example taxonomy.\nNow that our animals taxonomy exists, it needs to be added to individual content items. It\u0026rsquo;s as simple as inserting it into the front matter:\n--- title: \u0026#34;Into the Lion\u0026#39;s Den\u0026#34; description: \u0026#34;This week we\u0026#39;re learning about lions.\u0026#34; animals: [\u0026#34;lion\u0026#34;, \u0026#34;cat\u0026#34;] --- This has now created two terms within our animals taxonomy - lion and cat.\nAlthough it\u0026rsquo;s not obvious at this point, Hugo will now be generating list and term pages for this new taxonomy. By default the listing can be accessed at /animals/ and the term pages can be found at /animals/lion/ and /animals/cat/.\nThe list page will list all the terms contained within the taxonomy. In this example, navigating to /animals/ will show a page that has links for \u0026ldquo;lion\u0026rdquo; and \u0026ldquo;cat\u0026rdquo; which take visitors to the individual term pages.\nThe term pages will list all the pages contained within that term. These term lists are essentially the same as normal list pages and behave in much the same way.\nIn order to add custom content to taxonomy pages, simply create _index.md files in the content folder using the taxonomy name as the sub-directory name.\n. └── content └── animals ├── _index.md # /animals └── lion └── _index.md # /animals/lion Anything in these content files will now be placed onto the generated taxonomy pages. As with other content, the front matter variables can be used to override defaults. In this way you could have a tag named lion but override the title to be \u0026ldquo;Lion\u0026rdquo;.\nTo see how this looks in reality, check out the tags taxonomy listing on this site.\nLeaf pages #\rLayout: layouts/_default/single.html Content (standalone): content/../page-name.md Content (bundled): content/../page-name/index.md Leaf pages in Hugo are basically standard content pages. They are defined as pages that don\u0026rsquo;t contain any sub-pages. These could be things like an about page, or an individual blog post that lives in the blog section of the website.\nThe most important thing to remember about leaf pages is that unlike branch pages, leaf pages should be named index.md without an underscore. Leaf pages are also special in that they can be grouped together at the top level of the section and named with a unique name.\n. └── content └── blog ├── first-post.md # /blog/first-post ├── second-post.md # /blog/second-post └── third-post ├── index.md # /blog/third-post └── image.jpg When including assets in a page, like an image, a page bundle should be used. Page bundles are created using a sub-directory with an index.md file. Grouping the assets with the content in its own directory is important as many of the shortcodes and other theme logic assumes that resources are bundled alongside pages.\nExample:\n--- title: \u0026#34;My First Blog Post\u0026#34; date: 2022-01-25 description: \u0026#34;Welcome to my blog!\u0026#34; summary: \u0026#34;Learn more about me and why I am starting this blog.\u0026#34; tags: [\u0026#34;welcome\u0026#34;, \u0026#34;new\u0026#34;, \u0026#34;about\u0026#34;, \u0026#34;first\u0026#34;] --- _This_ is the content of my blog post. Leaf pages have a wide variety of front matter parameters that can be used to customise how they are displayed.\nExternal links #\rBlowfish has a special feature that allows links to external pages to appear alongside articles in the article listings. This is useful if you have content on third party websites like Medium, or research papers that you\u0026rsquo;d like to link to, without replicating the content in your Hugo site.\nIn order to create an external link article, some special front matter needs to be set:\n--- title: \u0026#34;My Medium post\u0026#34; date: 2022-01-25 externalUrl: \u0026#34;https://medium.com/\u0026#34; summary: \u0026#34;I wrote a post on Medium.\u0026#34; showReadingTime: false _build: render: \u0026#34;false\u0026#34; list: \u0026#34;local\u0026#34; --- Along with the normal front matter parameters like title and summary, the externalUrl parameter is used to tell Blowfish that this is not an ordinary article. The URL provided here will be where visitors are directed when they select this article.\nAdditionally, we use a special Hugo front matter parameter _build to prevent a normal page for this content being generated - there\u0026rsquo;s no point generating a page since we\u0026rsquo;re linking to an external URL!\nThe theme includes an archetype to make generating these external link articles simple. Just specify -k external when making new content.\nhugo new -k external posts/my-post.md Simple pages #\rLayout: layouts/_default/simple.html Front Matter: layout: \u0026quot;simple\u0026quot; Blowfish also includes a special layout for simple pages. The simple layout is a full-width template that just places Markdown content into the page without any special theme features.\nThe only features available in the simple layout are breadcrumbs and sharing links. However, the behaviour of these can still be controlled using the normal page front matter variables.\nTo enable the simple layout on a particular page, add the layout front matter variable with a value of \u0026quot;simple\u0026quot;:\n--- title: \u0026#34;My landing page\u0026#34; date: 2022-03-08 layout: \u0026#34;simple\u0026#34; --- This page content is now full-width. Custom layouts #\rOne of the benefits of Hugo is that it makes it easy to create custom layouts for the whole site, individual sections or pages.\nLayouts follow all the normal Hugo templating rules and more information is available in the official Hugo docs.\nOverriding default layouts #\rEach of the content types discussed above lists the layout file that is used to generate each type of page. If this file is created in your local project it will override the theme template and thus can be used to customise the default style of the website.\nFor example, creating a layouts/_default/single.html file will allow the layout of leaf pages to be completely customised.\nCustom section layouts #\rIt is also simple to create custom layouts for individual content sections. This is useful when you want to make a section that lists a certain type of content using a particular style.\nLet\u0026rsquo;s step through an example that creates a custom \u0026ldquo;Projects\u0026rdquo; page that lists projects using a special layout.\nIn order to do this, structure your content using the normal Hugo content rules and create a section for your projects. Additionally, create a new layout for the projects section by using the same directory name as the content and adding a list.html file.\n. └── content │ └── projects │ ├── _index.md │ ├── first-project.md │ └── second-project.md └── layouts └── projects └── list.html This list.html file will now override the default list template, but only for the projects section. Before we look at this file, lets first look at the individual project files.\n--- title: \u0026#34;Blowfish\u0026#34; date: 2021-08-11 icon: \u0026#34;github\u0026#34; description: \u0026#34;A theme for Hugo built with Tailwind CSS.\u0026#34; topics: [\u0026#34;Hugo\u0026#34;, \u0026#34;Web\u0026#34;, \u0026#34;Tailwind\u0026#34;] externalUrl: \u0026#34;https://github.com/nunocoracao/blowfish/\u0026#34; --- In this example we are assigning some metadata for each project that we can then use in our list template. There\u0026rsquo;s no page content, but there\u0026rsquo;s nothing stopping you from including it. It\u0026rsquo;s your own custom template after all!\nWith the projects defined, now we can create a list template that outputs the details of each project.\n{{ define \u0026#34;main\u0026#34; }} \u0026lt;section class=\u0026#34;mt-8\u0026#34;\u0026gt; {{ range .Pages }} \u0026lt;article class=\u0026#34;pb-6\u0026#34;\u0026gt; \u0026lt;a class=\u0026#34;flex\u0026#34; href=\u0026#34;{{ .Params.externalUrl }}\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;mr-3 text-3xl text-neutral-300\u0026#34;\u0026gt; \u0026lt;span class=\u0026#34;relative inline-block align-text-bottom\u0026#34;\u0026gt; {{ partial \u0026#34;icon.html\u0026#34; .Params.icon }} \u0026lt;/span\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h3 class=\u0026#34;flex text-xl font-semibold\u0026#34;\u0026gt; {{ .Title }} \u0026lt;/h3\u0026gt; \u0026lt;p class=\u0026#34;text-sm text-neutral-400\u0026#34;\u0026gt; {{ .Description }} \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/article\u0026gt; {{ end }} \u0026lt;/section\u0026gt; {{ end }} Although this is quite a straightforward example, you can see that it steps through each of the pages in this section (ie. each project), and then outputs HTML links to each project alongside an icon. The metadata in the front matter for each project is used to determine which information is displayed.\nKeep in mind that you\u0026rsquo;ll need to ensure the relevant styles and classes are available, which may require the Tailwind CSS to be recompiled. This is discussed in more detail in the Advanced Customisation section.\nWhen making custom templates like this one, it\u0026rsquo;s always easiest to take a look at how the default Blowfish template works and then use that as a guide. Remember, the Hugo docs are a great resource to learn more about creating templates too.\n","externalUrl":null,"permalink":"/Site/it/docs/content-examples/","section":"Documenti","summary":"If you\u0026rsquo;ve been reading the documentation in order, you should now know about all the features and configurations available in Blowfish. This page is designed to pull everything together and offer some worked examples that you might like to use in your Hugo project.","title":"Content Examples","type":"docs"},{"content":"Blowfish provides a feature to group a set of articles together under a \u0026ldquo;series\u0026rdquo;. Placing an article under a series will display the rest of the series articles in each single page and provide a quick way to navigate amongst them. You can see an example of this above.\nCreate Taxonomy #\rThe first step to enable series is to create the series taxonomy. For doing this just add the series taxonomy to your taxonomy list in the config.toml.\n[taxonomies] tag = \u0026#34;tags\u0026#34; category = \u0026#34;categories\u0026#34; author = \u0026#34;authors\u0026#34; series = \u0026#34;series\u0026#34; Mark Articles #\rThen you just need to mark each article using the series parameter and the series_order. The series parameter will be the id and name of the series you are placing the article into (even though the variable is an array we recommend keeping each article to a single series.). And the series_order defines the order of that article within the series. In the example below the article is number 11 in the Documentation series.\nseries: [\u0026#34;Documentation\u0026#34;] series_order: 11 Series Behavior #\rMarking an article as part of a series will automatically display the series module as you see in this page for example. You can choose whether that module starts opened or not using the article.seriesOpened global variable in params.toml or the front-matter parameter seriesOpened to specify an override at the article level.\n","externalUrl":null,"permalink":"/Site/it/docs/series/","section":"Documenti","summary":"Blowfish provides a feature to group a set of articles together under a \u0026ldquo;series\u0026rdquo;. Placing an article under a series will display the rest of the series articles in each single page and provide a quick way to navigate amongst them.","title":"Series","type":"docs"},{"content":"There are many ways you can make advanced changes to Blowfish. Read below to learn more about what can be customised and the best way of achieving your desired result.\nIf you need further advice, post your questions on GitHub Discussions.\nHugo project structure #\rBefore leaping into it, first a quick note about Hugo project structure and best practices for managing your content and theme customisations.\nIn summary: Never directly edit the theme files. Only make customisations in your Hugo project\u0026rsquo;s sub-directories, not in the themes directory itself.\rBlowfish is built to take advantage of all the standard Hugo practices. It is designed to allow all aspects of the theme to be customised and overridden without changing any of the core theme files. This allows for a seamless upgrade experience while giving you total control over the look and feel of your website.\nIn order to achieve this, you should never manually adjust any of the theme files directly. Whether you install using Hugo modules, as a git submodule or manually include the theme in your themes/ directory, you should always leave these files intact.\nThe correct way to adjust any theme behaviour is by overriding files using Hugo\u0026rsquo;s powerful file lookup order. In summary, the lookup order ensures any files you include in your project directory will automatically take precedence over any theme files.\nFor example, if you wanted to override the main article template in Blowfish, you can simply create your own layouts/_default/single.html file and place it in the root of your project. This file will then override the single.html from the theme without ever changing the theme itself. This works for any theme files - HTML templates, partials, shortcodes, config files, data, assets, etc.\nAs long as you follow this simple practice, you will always be able to update the theme (or test different theme versions) without worrying that you will lose any of your custom changes.\nChange image optimization settings #\rHugo has various builtin methods to resize, crop and optimize images.\nAs an example - in layouts/partials/article-link/card.html, you have the following code:\n{{ with .Resize \u0026#34;600x\u0026#34; }} \u0026lt;div class=\u0026#34;w-full thumbnail_card nozoom\u0026#34; style=\u0026#34;background-image:url({{ .RelPermalink }});\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; {{ end }} The default behavior of Hugo here is to resize the image to 600px keeping the ratio.\nIt is worth noting here that default image configurations such as anchor point can also be set in your site configuration as well as in the template itself.\nSee the Hugo docs on image processing for more info.\nColour schemes #\rBlowfish ships with a number of colour schemes out of the box. To change the basic colour scheme, you can set the colorScheme theme parameter. Refer to the Getting Started section to learn more about the built-in schemes.\nIn addition to the default schemes, you can also create your own and re-style the entire website to your liking. Schemes are created by by placing a \u0026lt;scheme-name\u0026gt;.css file in the assets/css/schemes/ folder. Once the file is created, simply refer to it by name in the theme configuration.\nNote: generating these files manually can be hard, I\u0026rsquo;ve built a nodejs terminal tool to help with that, Fugu. In a nutshell, you pass the main three hex values of your color palette and the program will output a css file that can be imported directly into Blowfish.\rBlowfish defines a three-colour palette that is used throughout the theme. The three colours are defined as neutral, primary and secondary variants, each containing ten shades of colour.\nDue to the way Tailwind CSS 3.0 calculates colour values with opacity, the colours specified in the scheme need to conform to a particular format by providing the red, green and blue colour values.\n:root { --color-primary-500: 139, 92, 246; } This example defines a CSS variable for the primary-500 colour with a red value of 139, green value of 92 and blue value of 246.\nUse one of the existing theme stylesheets as a template. You are free to define your own colours, but for some inspiration, check out the official Tailwind colour palette reference.\nOverriding the stylesheet #\rSometimes you need to add a custom style to style your own HTML elements. Blowfish provides for this scenario by allowing you to override the default styles in your own CSS stylesheet. Simply create a custom.css file in your project\u0026rsquo;s assets/css/ folder.\nThe custom.css file will be minified by Hugo and loaded automatically after all the other theme styles which means anything in your custom file will take precedence over the defaults.\nUsing additional fonts #\rBlowfish allows you to easily change the font for your site. After creating a custom.css file in your project\u0026rsquo;s assets/css/ folder, place you font file inside a fonts folder within the static root folder.\n. ├── assets │ └── css │ └── custom.css ... └─── static └── fonts └─── font.ttf This makes the font available to the website. Now, the font can just import it in your custom.css and replaced wherever you see fit. The example below shows what replacing the font for the entire html would look like.\n@font-face { font-family: font; src: url(\u0026#39;/fonts/font.ttf\u0026#39;); } html { font-family: font; } Adjusting the font size #\rChanging the font size of your website is one example of overriding the default stylesheet. Blowfish makes this simple as it uses scaled font sizes throughout the theme which are derived from the base HTML font size. By default, Tailwind sets the default size to 12pt, but it can be changed to whatever value you prefer.\nCreate a custom.css file using the instructions above and add the following CSS declaration:\n/* Increase the default font size */ html { font-size: 13pt; } Simply by changing this one value, all the font sizes on your website will be adjusted to match this new size. Therefore, to increase the overall font sizes used, make the value greater than 12pt. Similarly, to decrease the font sizes, make the value less than 12pt.\nBuilding the theme CSS from source #\rIf you\u0026rsquo;d like to make a major change, you can take advantage of Tailwind CSS\u0026rsquo;s JIT compiler and rebuild the entire theme CSS from scratch. This is useful if you want to adjust the Tailwind configuration or add extra Tailwind classes to the main stylesheet.\nNote: Building the theme manually is intended for advanced users.\rLet\u0026rsquo;s step through how building the Tailwind CSS works.\nTailwind configuration #\rIn order to generate a CSS file that only contains the Tailwind classes that are actually being used the JIT compiler needs to scan through all the HTML templates and Markdown content files to check which styles are present in the markup. The compiler does this by looking at the tailwind.config.js file which is included in the root of the theme directory:\n// themes/blowfish/tailwind.config.js module.exports = { content: [ \u0026#34;./layouts/**/*.html\u0026#34;, \u0026#34;./content/**/*.{html,md}\u0026#34;, \u0026#34;./themes/blowfish/layouts/**/*.html\u0026#34;, \u0026#34;./themes/blowfish/content/**/*.{html,md}\u0026#34;, ], // and more... }; This default configuration has been included with these content paths so that you can easily generate your own CSS file without needing to modify it, provided you follow a particular project structure. Namely, you have to include Blowfish in your project as a subdirectory at themes/blowfish/. This means you cannot easily use Hugo Modules to install the theme and you must go down either the git submodule (recommended) or manual install routes. The Installation docs explain how to install the theme using either of these methods.\nProject structure #\rIn order to take advantage of the default configuration, your project should look something like this\u0026hellip;\n. ├── assets │ └── css │ └── compiled │ └── main.css # this is the file we will generate ├── config # site config │ └── _default ├── content # site content │ ├── _index.md │ ├── projects │ │ └── _index.md │ └── blog │ └── _index.md ├── layouts # custom layouts for your site │ ├── partials │ │ └── extend-article-link/simple.html │ ├── projects │ │ └── list.html │ └── shortcodes │ └── disclaimer.html └── themes └── blowfish # git submodule or manual theme install This example structure adds a new projects content type with its own custom layout along with a custom shortcode and extended partial. Provided the project follows this structure, all that\u0026rsquo;s required is to recompile the main.css file.\nInstall dependencies #\rIn order for this to work you\u0026rsquo;ll need to change into the themes/blowfish/ directory and install the project dependencies. You\u0026rsquo;ll need npm on your local machine for this step.\ncd themes/blowfish npm install Run the Tailwind compiler #\rWith the dependencies installed all that\u0026rsquo;s left is to use Tailwind CLI to invoke the JIT compiler. Navigate back to the root of your Hugo project and issue the following command:\ncd ../.. ./themes/blowfish/node_modules/tailwindcss/lib/cli.js -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit It\u0026rsquo;s a bit of an ugly command due to the paths involved but essentially you\u0026rsquo;re calling Tailwind CLI and passing it the location of the Tailwind config file (the one we looked at above), where to find the theme\u0026rsquo;s main.css file and then where you want the compiled CSS file to be placed (it\u0026rsquo;s going into the assets/css/compiled/ folder of your Hugo project).\nThe config file will automatically inspect all the content and layouts in your project as well as all those in the theme and build a new CSS file that contains all the CSS required for your website. Due to the way Hugo handles file hierarchy, this file in your project will now automatically override the one that comes with the theme.\nEach time you make a change to your layouts and need new Tailwind CSS styles, you can simply re-run the command and generate the new CSS file. You can also add -w to the end of the command to run the JIT compiler in watch mode.\nMake a build script #\rTo fully complete this solution, you can simplify this whole process by adding aliases for these commands, or do what I do and add a package.json to the root of your project which contains the necessary scripts\u0026hellip;\n// package.json { \u0026#34;name\u0026#34;: \u0026#34;my-website\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;1.0.0\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;scripts\u0026#34;: { \u0026#34;server\u0026#34;: \u0026#34;hugo server -b http://localhost -p 8000\u0026#34;, \u0026#34;dev\u0026#34;: \u0026#34;NODE_ENV=development ./themes/blowfish/node_modules/tailwindcss/lib/cli.js -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit -w\u0026#34;, \u0026#34;build\u0026#34;: \u0026#34;NODE_ENV=production ./themes/blowfish/node_modules/tailwindcss/lib/cli.js -c ./themes/blowfish/tailwind.config.js -i ./themes/blowfish/assets/css/main.css -o ./assets/css/compiled/main.css --jit\u0026#34; }, // and more... } Now when you want to work on designing your site, you can invoke npm run dev and the compiler will run in watch mode. When you\u0026rsquo;re ready to deploy, run npm run build and you\u0026rsquo;ll get a clean Tailwind CSS build.\n🙋‍♀️ If you need help, feel free to ask a question on GitHub Discussions.\n","externalUrl":null,"permalink":"/Site/it/docs/advanced-customisation/","section":"Documenti","summary":"There are many ways you can make advanced changes to Blowfish. Read below to learn more about what can be customised and the best way of achieving your desired result.","title":"Advanced Customisation","type":"docs"},{"content":"There are many ways to deploy your Hugo website built with Blowfish. The theme is designed to be flexible in almost any deployment scenario.\nBlowfish is built using relative URLs throughout the theme. This enables sites to easily be deployed to sub-folders and hosts like GitHub Pages. There\u0026rsquo;s usually no special configuration required for this to work as long as the baseURL parameter has been configured in the config.toml file.\nThe official Hugo Hosting and Deployment docs are the best place to learn how to deploy your site. The sections below contain some specific theme configuration details that can help you deploy smoothly with certain providers.\nChoose your provider:\nGitHub Pages Netlify Render Cloudflare Pages Shared hosting, VPS or private web server GitHub Pages #\rGitHub allows hosting on GitHub Pages using Actions. To enable this functionality, enable Pages on your repo and create a new Actions workflow to build and deploy your site.\nThe file needs to be in YAML format, placed within the .github/workflows/ directory of your GitHub repository and named with a .yml extension.\nImportant: Ensure you set the correct branch name under branches and in the deploy step if parameter to the source branch used in your project.\r# .github/workflows/gh-pages.yml name: GitHub Pages on: push: branches: - main jobs: build-deploy: runs-on: ubuntu-20.04 concurrency: group: ${{ github.workflow }}-${{ github.ref }} steps: - name: Checkout uses: actions/checkout@v3 with: submodules: true fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#34;latest\u0026#34; - name: Build run: hugo --minify - name: Deploy uses: peaceiris/actions-gh-pages@v3 if: ${{ github.ref == \u0026#39;refs/heads/main\u0026#39; }} with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_branch: gh-pages publish_dir: ./public Push the config file to GitHub and the action should automatically run. It may fail the first time and you\u0026rsquo;ll need to visit the Settings \u0026gt; Pages section of your GitHub repo to check the source is correct. It should be set to use the gh-pages branch.\nOnce the settings are configured, re-run the action and the site should build and deploy correctly. You can consult the actions log to check everything deployed successfully.\nNetlify #\rTo deploy to Netlify, create a new continuous deployment site and link it to your source code. The build settings can be left blank in the Netlify UI. You will only need to configure the domain you\u0026rsquo;ll be using.\nThen in the root of your site repository, create a netlify.toml file:\n# netlify.toml [build] command = \u0026#34;hugo mod get -u \u0026amp;\u0026amp; hugo --gc --minify -b $URL\u0026#34; publish = \u0026#34;public\u0026#34; [build.environment] NODE_ENV = \u0026#34;production\u0026#34; GO_VERSION = \u0026#34;1.16\u0026#34; TZ = \u0026#34;UTC\u0026#34; # Set to preferred timezone [context.production.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; HUGO_ENV = \u0026#34;production\u0026#34; [context.deploy-preview.environment] HUGO_VERSION = \u0026#34;0.104.1\u0026#34; This configuration assumes you are deploying Blowfish as a Hugo module. If you have installed the theme using another method, change the build command to simply hugo --gc --minify -b $URL.\nWhen you push the config file to your repo, Netlify should automatically deploy your site. You can check the deploy logs in the Netlify UI to check for any errors.\nRender #\rDeploying to Render is very straightforward and all configuration is via the Render UI.\nCreate a new Static Site and link it to your project\u0026rsquo;s code repository. Then simply configure the build command to be hugo --gc --minify and publish directory to be public.\nThe site will automatically build and deploy whenever you push a change to your repo.\nCloudflare Pages #\rCloudflare offers the Pages service that can host Hugo blogs. It builds the site from a git repository and then hosts it on Cloudflare\u0026rsquo;s CDN. Follow their Hugo deployment guide to get started.\nThe Rocket Loader™ feature offered by Cloudflare tries to speed up rendering of web pages with JavaScript, but it breaks the appearance switcher in the theme. It can also cause an annoying light/dark screen flash when browsing your site due to scripts loading in the wrong order.\nThis problem can be fixed by disabling it:\nGo to the Cloudflare dashboard Click on your domain name in the list Click Optimization in the Speed section Scroll down to Rocket Loader™ and disable it Hugo sites built with Blowfish still load very quickly, even with this feature disabled.\nShared hosting, VPS or private web server #\rUsing traditional web hosting, or deploying to your own web server, is as simple as building your Hugo site and transferring the files to your host.\nMake sure that the baseURL parameter in config.toml is set to the full URL to the root of your website (including any sub domains or sub-folders).\nThen build your site using hugo and copy the contents of the output directory to the root of your web server and you will be ready to go. By default, the output directory is named public.\nIf you need a hosting provider, check out Vultr or DigitalOcean. Signing up using these affiliate links will give you up to $100 in free credit so you can try the service.\n","externalUrl":null,"permalink":"/Site/it/docs/hosting-deployment/","section":"Documenti","summary":"There are many ways to deploy your Hugo website built with Blowfish. The theme is designed to be flexible in almost any deployment scenario.\nBlowfish is built using relative URLs throughout the theme.","title":"Hosting \u0026 Deployment","type":"docs"},{"content":"In order to be able to support dynamic data across your website we\u0026rsquo;ve added the support to integrate Firebase. This will allow you to use the views feature across lists and posts.\nGo to Firebase website and create an account for free Create a new project Select analytics location Setup firebase in Blowfish by getting the variables for your project and setting them inside params.toml file. More details can be found in this page. You can find an example of the file Firebase will provide below, notice the parameters within the FirebaseConfig object. // Import the functions you need from the SDKs you need\rimport { initializeApp } from \u0026#34;firebase/app\u0026#34;;\rimport { getAnalytics } from \u0026#34;firebase/analytics\u0026#34;;\r// TODO: Add SDKs for Firebase products that you want to use\r// https://firebase.google.com/docs/web/setup#available-libraries\r// Your web app\u0026#39;s Firebase configuration\r// For Firebase JS SDK v7.20.0 and later, measurementId is optional\rconst firebaseConfig = {\rapiKey: \u0026#34;AIzaSyB5tqlqDky77Vb4Tc4apiHV4hRZI18KGiY\u0026#34;,\rauthDomain: \u0026#34;blowfish-21fff.firebaseapp.com\u0026#34;,\rprojectId: \u0026#34;blowfish-21fff\u0026#34;,\rstorageBucket: \u0026#34;blowfish-21fff.appspot.com\u0026#34;,\rmessagingSenderId: \u0026#34;60108104191\u0026#34;,\rappId: \u0026#34;1:60108104191:web:039842ebe1370698b487ca\u0026#34;,\rmeasurementId: \u0026#34;G-PEDMYR1V0K\u0026#34;\r};\r// Initialize Firebase\rconst app = initializeApp(firebaseConfig);\rconst analytics = getAnalytics(app); Setup Firestore - Select Build and open Firestore. Create a new database and choose to start in production mode. Select server location and wait. Once that is started you need to configure the rules. Just copy and paste the file below and press publish. rules_version = \u0026#39;2\u0026#39;;\rservice cloud.firestore {\rmatch /databases/{database}/documents {\rmatch /{document=**} {\rallow read, write: if request.auth != null;\r}\r}\r} Enable anonymous authorization - Select Build and open Authentication. Select get started, click Anonymous and turn it on, save. Enjoy - you can now activate views and likes on Blowfish for all (or specific) articles. ","externalUrl":null,"permalink":"/Site/it/docs/firebase-views/","section":"Documenti","summary":"In order to be able to support dynamic data across your website we\u0026rsquo;ve added the support to integrate Firebase. This will allow you to use the views feature across lists and posts.","title":"Firebase: Views \u0026 Likes","type":"docs"},{"content":"\rQuesta è una demo del layout background.\rCambia layout \u0026orarr;\rnpx blowfish-tools ","date":"14 agosto 2020","externalUrl":null,"permalink":"/Site/it/","section":"Benvenuti a Blowfish!","summary":"\rQuesta è una demo del layout background.\rCambia layout \u0026orarr;\rnpx blowfish-tools ","title":"Benvenuti a Blowfish!","type":"page"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/Site/it/tags/config/","section":"Tags","summary":"","title":"Config","type":"tags"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/Site/it/tags/docs/","section":"Tags","summary":"","title":"Docs","type":"tags"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/Site/it/series/documentazione/","section":"Series","summary":"","title":"Documentazione","type":"series"},{"content":"\rSemplice ma potente. Scopri come utilizzare Blowfish e le sue funzionalità.\rQuesta sezione contiene tutto ciò che devi sapere su Blowfish. Se sei nuovo, consulta la guida Installazione per iniziare o visita la sezione Esempi per vedere cosa può fare Blowfish.\n","date":"14 agosto 2020","externalUrl":null,"permalink":"/Site/it/docs/","section":"Documenti","summary":"Semplice ma potente. Scopri come utilizzare Blowfish e le sue funzionalità.\rQuesta sezione contiene tutto ciò che devi sapere su Blowfish. Se sei nuovo, consulta la guida Installazione per iniziare o visita la sezione Esempi per vedere cosa può fare Blowfish.","title":"Documenti","type":"docs"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/Site/it/series/","section":"Series","summary":"","title":"Series","type":"series"},{"content":"","date":"14 agosto 2020","externalUrl":null,"permalink":"/Site/it/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/advanced/","section":"Tags","summary":"","title":"Advanced","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/analytics/","section":"Tags","summary":"","title":"Analytics","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/authors/","section":"Tags","summary":"","title":"Authors","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/comments/","section":"Tags","summary":"","title":"Comments","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/content/","section":"Tags","summary":"","title":"Content","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/css/","section":"Tags","summary":"","title":"Css","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/deployment/","section":"Tags","summary":"","title":"Deployment","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/series/documentation/","section":"Series","summary":"","title":"Documentation","type":"series"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/documenti/","section":"Tags","summary":"","title":"Documenti","type":"tags"},{"content":"Un rapido esempio di come iniziare a utilizzare le tassonomie degli autori nei tuoi articoli.\n","externalUrl":null,"permalink":"/Site/it/authors/","section":"Esempio di elenco di tassonomia degli autori","summary":"Un rapido esempio di come iniziare a utilizzare le tassonomie degli autori nei tuoi articoli.","title":"Esempio di elenco di tassonomia degli autori","type":"authors"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/example/","section":"Tags","summary":"","title":"Example","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/favicons/","section":"Tags","summary":"","title":"Favicons","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/firebase/","section":"Tags","summary":"","title":"Firebase","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/front-matter/","section":"Tags","summary":"","title":"Front Matter","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/github/","section":"Tags","summary":"","title":"Github","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/homepage/","section":"Tags","summary":"","title":"Homepage","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/hosting/","section":"Tags","summary":"","title":"Hosting","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/icon/","section":"Tags","summary":"","title":"Icon","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/tags/installation/","section":"Tags","summary":"","title":"Installation","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/installazione/","section":"Tags","summary":"","title":"Installazione","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/layouts/","section":"Tags","summary":"","title":"Layouts","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/likes/","section":"Tags","summary":"","title":"Likes","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/netlify/","section":"Tags","summary":"","title":"Netlify","type":"tags"},{"content":"La fantastica biografia di Nuno.\n","externalUrl":null,"permalink":"/Site/it/authors/nunocoracao/","section":"Esempio di elenco di tassonomia degli autori","summary":"La fantastica biografia di Nuno.","title":"Nuno Coraçao","type":"authors"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/partials/","section":"Tags","summary":"","title":"Partials","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/privacy/","section":"Tags","summary":"","title":"Privacy","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/render/","section":"Tags","summary":"","title":"Render","type":"tags"},{"content":"La fantastica biografia fittizia di Dummy Second Author.\n","externalUrl":null,"permalink":"/Site/it/authors/secondauthor/","section":"Esempio di elenco di tassonomia degli autori","summary":"La fantastica biografia fittizia di Dummy Second Author.","title":"Secondo autore fittizio","type":"authors"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/series/","section":"Tags","summary":"","title":"Series","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/it/tags/views/","section":"Tags","summary":"","title":"Views","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E4%B8%BB%E9%A1%B5/","section":"Tags","summary":"","title":"主页","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E4%BD%9C%E8%80%85/","section":"Tags","summary":"","title":"作者","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E5%86%85%E5%AE%B9/","section":"Tags","summary":"","title":"内容","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E5%9B%BE%E6%A0%87/","section":"Tags","summary":"","title":"图标","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E5%AE%89%E8%A3%85/","section":"Tags","summary":"","title":"安装","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E5%B8%83%E5%B1%80/","section":"Tags","summary":"","title":"布局","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E6%89%98%E7%AE%A1/","section":"Tags","summary":"","title":"托管","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E6%96%87%E6%A1%A3/","section":"Tags","summary":"","title":"文档","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E6%B8%B2%E6%9F%93%E5%99%A8/","section":"Tags","summary":"","title":"渲染器","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E7%82%B9%E8%B5%9E%E9%87%8F/","section":"Tags","summary":"","title":"点赞量","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E7%A4%BA%E4%BE%8B/","section":"Tags","summary":"","title":"示例","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E7%B3%BB%E5%88%97/","section":"Tags","summary":"","title":"系列","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E7%BB%9F%E8%AE%A1%E6%9C%8D%E5%8A%A1/","section":"Tags","summary":"","title":"统计服务","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E7%BD%91%E7%AB%99%E5%9B%BE%E6%A0%87/","section":"Tags","summary":"","title":"网站图标","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E8%AF%84%E8%AE%BA/","section":"Tags","summary":"","title":"评论","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E9%83%A8%E7%BD%B2/","section":"Tags","summary":"","title":"部署","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/series/%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B/","section":"Series","summary":"","title":"部署教程","type":"series"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E9%85%8D%E7%BD%AE/","section":"Tags","summary":"","title":"配置","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E9%98%85%E8%AF%BB%E9%87%8F/","section":"Tags","summary":"","title":"阅读量","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E9%9A%90%E7%A7%81/","section":"Tags","summary":"","title":"隐私","type":"tags"},{"content":"","externalUrl":null,"permalink":"/Site/zh-cn/tags/%E9%AB%98%E7%BA%A7/","section":"Tags","summary":"","title":"高级","type":"tags"}]